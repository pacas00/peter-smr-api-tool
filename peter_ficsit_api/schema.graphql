directive @canApproveMods on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @canApproveVersions on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @canEditAnnouncements on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @canEditBootstrapVersions on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @canEditGuide(field: String!) on FIELD_DEFINITION

directive @canEditMod(field: String!) on FIELD_DEFINITION

directive @canEditSMLVersions on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @canEditUser(field: String!, object: Boolean!) on FIELD_DEFINITION

directive @canEditUsers on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @canEditVersion(field: String!) on FIELD_DEFINITION

directive @isLoggedIn on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @isNotLoggedIn on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type Announcement {
  id: AnnouncementID!

  message: String!

  importance: AnnouncementImportance!
}

scalar AnnouncementID

enum AnnouncementImportance {
  Fix

  Info

  Warning

  Alert
}

type BootstrapVersion {
  id: BootstrapVersionID!

  version: String!

  satisfactory_version: Int!

  stability: VersionStabilities!

  link: String!

  changelog: String!

  date: Date!

  updated_at: Date!

  created_at: Date!
}

enum BootstrapVersionFields {
  name

  created_at

  updated_at

  satisfactory_version

  date
}

input BootstrapVersionFilter {
  limit: Int

  offset: Int

  order_by: BootstrapVersionFields

  order: Order

  search: String

  ids: [String!]
}

scalar BootstrapVersionID

type CreateVersionResponse {
  auto_approved: Boolean!

  version: Version
}

scalar Date

type GetBootstrapVersions {
  bootstrap_versions: [BootstrapVersion!]!

  count: Int!
}

type GetGuides {
  guides: [Guide!]!

  count: Int!
}

type GetMods {
  mods: [Mod!]!

  count: Int!
}

type GetMyMods {
  mods: [Mod!]!

  count: Int!
}

type GetMyVersions {
  versions: [Version!]!

  count: Int!
}

type GetSMLVersions {
  sml_versions: [SMLVersion!]!

  count: Int!
}

type GetVersions {
  versions: [Version!]!

  count: Int!
}

type Group {
  id: String!

  name: String!
}

type Guide {
  id: GuideID!

  name: String!

  short_description: String!

  guide: String!

  views: Int!

  user_id: UserID!

  updated_at: Date!

  created_at: Date!

  user: User!
}

enum GuideFields {
  name

  created_at

  updated_at

  views
}

input GuideFilter {
  limit: Int

  offset: Int

  order_by: GuideFields

  order: Order

  search: String

  ids: [String!]
}

scalar GuideID

type LatestVersions {
  alpha: Version

  beta: Version

  release: Version
}

type Mod {
  id: ModID!

  name: String!

  short_description: String!

  full_description: String

  logo: String

  source_url: String

  creator_id: UserID!

  approved: Boolean!

  views: Int!

  downloads: Int!

  hotness: Int!

  popularity: Int!

  updated_at: Date!

  created_at: Date!

  last_version_date: Date

  mod_reference: ModReference!

  hidden: Boolean!

  authors: [UserMod!]!

  version(version: String!): Version

  versions(filter: VersionFilter): [Version!]!

  latestVersions: LatestVersions!
}

enum ModFields {
  created_at

  updated_at

  name

  views

  downloads

  hotness

  popularity

  last_version_date

  search
}

input ModFilter {
  limit: Int

  offset: Int

  order_by: ModFields

  order: Order

  search: String

  ids: [String!]

  references: [String!]

  hidden: Boolean
}

scalar ModID

scalar ModReference

type ModVersion {
  id: ModID!

  mod_reference: ModReference!

  versions: [Version!]!
}

input ModVersionConstraint {
  modIdOrReference: String!

  version: String!
}

type Mutation {
  discourseSSO(sso: String!, sig: String!): String

  createAnnouncement(announcement: NewAnnouncement!): Announcement

  updateAnnouncement(
    announcementId: AnnouncementID!
    announcement: UpdateAnnouncement!
  ): Announcement!

  deleteAnnouncement(announcementId: AnnouncementID!): Boolean!

  createBootstrapVersion(
    bootstrapVersion: NewBootstrapVersion!
  ): BootstrapVersion

  updateBootstrapVersion(
    bootstrapVersionId: BootstrapVersionID!
    bootstrapVersion: UpdateBootstrapVersion!
  ): BootstrapVersion!

  deleteBootstrapVersion(bootstrapVersionId: BootstrapVersionID!): Boolean!

  createGuide(guide: NewGuide!): Guide

  updateGuide(guideId: GuideID!, guide: UpdateGuide!): Guide!

  deleteGuide(guideId: GuideID!): Boolean!

  createMod(mod: NewMod!): Mod

  updateMod(modId: ModID!, mod: UpdateMod!): Mod!

  deleteMod(modId: ModID!): Boolean!

  approveMod(modId: ModID!): Boolean!

  denyMod(modId: ModID!): Boolean!

  createSMLVersion(smlVersion: NewSMLVersion!): SMLVersion

  updateSMLVersion(
    smlVersionId: SMLVersionID!
    smlVersion: UpdateSMLVersion!
  ): SMLVersion!

  deleteSMLVersion(smlVersionId: SMLVersionID!): Boolean!

  updateUser(userId: UserID!, input: UpdateUser!): User!

  logout: Boolean!

  oAuthGithub(code: String!, state: String!): UserSession

  oAuthGoogle(code: String!, state: String!): UserSession

  oAuthFacebook(code: String!, state: String!): UserSession

  createVersion(modId: ModID!): VersionID!

  uploadVersionPart(
    modId: ModID!
    versionId: VersionID!
    part: Int!
    file: Upload!
  ): Boolean!

  finalizeCreateVersion(
    modId: ModID!
    versionId: VersionID!
    version: NewVersion!
  ): Boolean!

  updateVersion(versionId: VersionID!, version: UpdateVersion!): Version!

  deleteVersion(versionId: VersionID!): Boolean!

  approveVersion(versionId: VersionID!): Boolean!

  denyVersion(versionId: VersionID!): Boolean!
}

input NewAnnouncement {
  message: String!

  importance: AnnouncementImportance!
}

input NewBootstrapVersion {
  version: String!

  satisfactory_version: Int!

  stability: VersionStabilities!

  link: String!

  changelog: String!

  date: Date!
}

input NewGuide {
  name: String!

  short_description: String!

  guide: String!
}

input NewMod {
  name: String!

  short_description: String!

  full_description: String

  logo: Upload

  source_url: String

  mod_reference: ModReference!

  hidden: Boolean
}

input NewSMLVersion {
  version: String!

  satisfactory_version: Int!

  stability: VersionStabilities!

  link: String!

  changelog: String!

  date: Date!

  bootstrap_version: String
}

input NewVersion {
  changelog: String!

  stability: VersionStabilities!
}

type OAuthOptions {
  github: String!

  google: String!

  facebook: String!
}

enum Order {
  asc

  desc
}

type Query {
  getOAuthOptions(callback_url: String!): OAuthOptions!

  getAnnouncement(announcementId: AnnouncementID!): Announcement

  getAnnouncements: [Announcement!]!

  getAnnouncementsByImportance(
    importance: AnnouncementImportance!
  ): [Announcement!]!

  getBootstrapVersion(bootstrapVersionID: BootstrapVersionID!): BootstrapVersion

  getBootstrapVersions(filter: BootstrapVersionFilter): GetBootstrapVersions!

  getGuide(guideId: GuideID!): Guide

  getGuides(filter: GuideFilter): GetGuides!

  getMod(modId: ModID!): Mod

  getModByReference(modReference: ModReference!): Mod

  getModByIdOrReference(modIdOrReference: String!): Mod

  getMods(filter: ModFilter): GetMods!

  getUnapprovedMods(filter: ModFilter): GetMods!

  getMyMods(filter: ModFilter): GetMyMods!

  getMyUnapprovedMods(filter: ModFilter): GetMyMods!

  resolveModVersions(filter: [ModVersionConstraint!]!): [ModVersion!]!

  getSMLVersion(smlVersionID: SMLVersionID!): SMLVersion

  getSMLVersions(filter: SMLVersionFilter): GetSMLVersions!

  getMe: User

  getUser(userId: UserID!): User

  getUsers(userIds: [UserID!]!): [User]!

  getVersion(versionId: VersionID!): Version

  getVersions(filter: VersionFilter): GetVersions!

  getUnapprovedVersions(filter: VersionFilter): GetVersions!

  checkVersionUploadState(
    modId: ModID!
    versionId: VersionID!
  ): CreateVersionResponse

  getMyVersions(filter: VersionFilter): GetMyVersions!

  getMyUnapprovedVersions(filter: VersionFilter): GetMyVersions!
}

type SMLVersion {
  id: SMLVersionID!

  version: String!

  satisfactory_version: Int!

  stability: VersionStabilities!

  link: String!

  changelog: String!

  date: Date!

  bootstrap_version: String

  updated_at: Date!

  created_at: Date!
}

enum SMLVersionFields {
  name

  created_at

  updated_at

  satisfactory_version

  date
}

input SMLVersionFilter {
  limit: Int

  offset: Int

  order_by: SMLVersionFields

  order: Order

  search: String

  ids: [String!]
}

scalar SMLVersionID

input UpdateAnnouncement {
  message: String

  importance: AnnouncementImportance
}

input UpdateBootstrapVersion {
  version: String

  satisfactory_version: Int

  stability: VersionStabilities

  link: String

  changelog: String

  date: Date
}

input UpdateGuide {
  name: String

  short_description: String

  guide: String
}

input UpdateMod {
  name: String

  short_description: String

  full_description: String

  logo: Upload

  source_url: String

  mod_reference: ModReference

  authors: [UpdateUserMod!]

  hidden: Boolean
}

input UpdateSMLVersion {
  version: String

  satisfactory_version: Int

  stability: VersionStabilities

  link: String

  changelog: String

  date: Date

  bootstrap_version: String
}

input UpdateUser {
  avatar: Upload

  groups: [String!]

  username: String
}

input UpdateUserMod {
  user_id: UserID!

  role: String!
}

input UpdateVersion {
  changelog: String

  stability: VersionStabilities
}

scalar Upload

type User {
  id: UserID!

  email: String

  username: String!

  avatar: String

  created_at: Date!

  github_id: String

  google_id: String

  facebook_id: String

  roles: UserRoles!

  groups: [Group!]!

  mods: [UserMod!]!

  guides: [Guide!]!
}

scalar UserID

type UserMod {
  user_id: UserID!

  mod_id: ModID!

  role: String!

  user: User!

  mod: Mod!
}

type UserRoles {
  approveMods: Boolean!

  approveVersions: Boolean!

  deleteContent: Boolean!

  editContent: Boolean!

  editUsers: Boolean!

  editSMLVersions: Boolean!

  editBootstrapVersions: Boolean!
}

type UserSession {
  token: String!
}

type Version {
  id: VersionID!

  mod_id: ModID!

  version: String!

  sml_version: String!

  changelog: String!

  downloads: Int!

  stability: VersionStabilities!

  approved: Boolean!

  updated_at: Date!

  created_at: Date!

  link: String!

  metadata: String

  size: Int

  hash: String

  mod: Mod!

  dependencies: [VersionDependency!]!
}

type VersionDependency {
  version_id: VersionID!

  mod_id: ModID!

  condition: String!

  optional: Boolean!

  mod: Mod

  version: Version
}

enum VersionFields {
  created_at

  updated_at

  downloads
}

input VersionFilter {
  limit: Int

  offset: Int

  order_by: VersionFields

  order: Order

  search: String

  ids: [String!]
}

scalar VersionID

enum VersionStabilities {
  alpha

  beta

  release
}





