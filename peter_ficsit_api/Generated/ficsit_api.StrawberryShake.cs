// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public static partial class ficsit_apiServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::peter_ficsit_api.GraphQL.State.ficsit_apiStoreAccessor> Addficsit_api(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::peter_ficsit_api.GraphQL.State.ficsit_apiStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.GetModsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.GetModQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.SearchModsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.GetSMLVersionsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.CheckVersionUploadStateQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.CreateVersionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.FinalizeCreateVersionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.GetModVersionQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.UpdateVersionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.UploadVersionPartMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.ficsit_api>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.Ificsit_api>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::peter_ficsit_api.GraphQL.State.ficsit_apiStoreAccessor>("ficsit_api", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ficsit_api"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::peter_ficsit_api.GraphQL.OrderSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::peter_ficsit_api.GraphQL.ModFieldsSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::peter_ficsit_api.GraphQL.VersionStabilitiesSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ModID"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ModReference"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("VersionID"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("UserID"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("SMLVersionID"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::peter_ficsit_api.GraphQL.NewVersionInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::peter_ficsit_api.GraphQL.UpdateVersionInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModsResult>, global::peter_ficsit_api.GraphQL.State.GetModsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.IGetModsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModsResult>, global::peter_ficsit_api.GraphQL.State.GetModsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.IGetModsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.GetModsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.IGetModsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.GetModsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModResult>, global::peter_ficsit_api.GraphQL.State.GetModResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.IGetModQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModResult>, global::peter_ficsit_api.GraphQL.State.GetModBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.IGetModResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.GetModQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.IGetModQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.GetModQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ISearchModsResult>, global::peter_ficsit_api.GraphQL.State.SearchModsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ISearchModsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.ISearchModsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ISearchModsResult>, global::peter_ficsit_api.GraphQL.State.SearchModsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.ISearchModsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ISearchModsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ISearchModsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.SearchModsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.ISearchModsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.SearchModsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult>, global::peter_ficsit_api.GraphQL.State.GetSMLVersionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.IGetSMLVersionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult>, global::peter_ficsit_api.GraphQL.State.GetSMLVersionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.GetSMLVersionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.IGetSMLVersionsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.GetSMLVersionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult>, global::peter_ficsit_api.GraphQL.State.CheckVersionUploadStateResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult>, global::peter_ficsit_api.GraphQL.State.CheckVersionUploadStateBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.CheckVersionUploadStateQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.CheckVersionUploadStateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ICreateVersionResult>, global::peter_ficsit_api.GraphQL.State.CreateVersionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ICreateVersionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.ICreateVersionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ICreateVersionResult>, global::peter_ficsit_api.GraphQL.State.CreateVersionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.ICreateVersionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ICreateVersionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ICreateVersionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.CreateVersionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.ICreateVersionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.CreateVersionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult>, global::peter_ficsit_api.GraphQL.State.FinalizeCreateVersionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult>, global::peter_ficsit_api.GraphQL.State.FinalizeCreateVersionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.FinalizeCreateVersionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.FinalizeCreateVersionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModVersionResult>, global::peter_ficsit_api.GraphQL.State.GetModVersionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModVersionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.IGetModVersionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModVersionResult>, global::peter_ficsit_api.GraphQL.State.GetModVersionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.IGetModVersionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModVersionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModVersionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.GetModVersionQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.IGetModVersionQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.GetModVersionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IUpdateVersionResult>, global::peter_ficsit_api.GraphQL.State.UpdateVersion_1ResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IUpdateVersionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.IUpdateVersionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IUpdateVersionResult>, global::peter_ficsit_api.GraphQL.State.UpdateVersionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.IUpdateVersionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IUpdateVersionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IUpdateVersionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.UpdateVersionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.IUpdateVersionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.UpdateVersionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IUploadVersionPartResult>, global::peter_ficsit_api.GraphQL.State.UploadVersionPartResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IUploadVersionPartResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.IUploadVersionPartMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IUploadVersionPartResult>, global::peter_ficsit_api.GraphQL.State.UploadVersionPartBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::peter_ficsit_api.GraphQL.IUploadVersionPartResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IUploadVersionPartResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IUploadVersionPartResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.UploadVersionPartMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.IUploadVersionPartMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.UploadVersionPartMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::peter_ficsit_api.GraphQL.State.ficsit_apiEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.ficsit_api>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::peter_ficsit_api.GraphQL.Ificsit_api>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::peter_ficsit_api.GraphQL.ficsit_api>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace peter_ficsit_api.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModsResult : global::System.IEquatable<GetModsResult>, IGetModsResult
    {
        public GetModsResult(global::peter_ficsit_api.GraphQL.IGetMods_GetMods getMods)
        {
            GetMods = getMods;
        }

        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods GetMods { get; }

        public virtual global::System.Boolean Equals(GetModsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GetMods.Equals(other.GetMods));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetModsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GetMods.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMods_GetMods_GetMods : global::System.IEquatable<GetMods_GetMods_GetMods>, IGetMods_GetMods_GetMods
    {
        public GetMods_GetMods_GetMods(global::System.Int32 count, global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods> mods)
        {
            Count = count;
            Mods = mods;
        }

        public global::System.Int32 Count { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods> Mods { get; }

        public virtual global::System.Boolean Equals(GetMods_GetMods_GetMods? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Count == other.Count) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Mods, other.Mods);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMods_GetMods_GetMods)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Count.GetHashCode();
                foreach (var Mods_elm in Mods)
                {
                    hash ^= 397 * Mods_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMods_GetMods_Mods_Mod : global::System.IEquatable<GetMods_GetMods_Mods_Mod>, IGetMods_GetMods_Mods_Mod
    {
        public GetMods_GetMods_Mods_Mod(global::System.String id, global::System.String mod_Reference, global::System.String name, global::System.String? logo, global::System.Int32 views, global::System.Int32 downloads, global::System.String short_Description, global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions latestVersions)
        {
            Id = id;
            Mod_reference = mod_Reference;
            Name = name;
            Logo = logo;
            Views = views;
            Downloads = downloads;
            Short_description = short_Description;
            LatestVersions = latestVersions;
        }

        public global::System.String Id { get; }

        public global::System.String Mod_reference { get; }

        public global::System.String Name { get; }

        public global::System.String? Logo { get; }

        public global::System.Int32 Views { get; }

        public global::System.Int32 Downloads { get; }

        public global::System.String Short_description { get; }

        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions LatestVersions { get; }

        public virtual global::System.Boolean Equals(GetMods_GetMods_Mods_Mod? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Mod_reference.Equals(other.Mod_reference) && Name.Equals(other.Name) && ((Logo is null && other.Logo is null) || Logo != null && Logo.Equals(other.Logo)) && Views == other.Views && Downloads == other.Downloads && Short_description.Equals(other.Short_description) && LatestVersions.Equals(other.LatestVersions);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMods_GetMods_Mods_Mod)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Mod_reference.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Logo != null)
                {
                    hash ^= 397 * Logo.GetHashCode();
                }

                hash ^= 397 * Views.GetHashCode();
                hash ^= 397 * Downloads.GetHashCode();
                hash ^= 397 * Short_description.GetHashCode();
                hash ^= 397 * LatestVersions.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMods_GetMods_Mods_LatestVersions_LatestVersions : global::System.IEquatable<GetMods_GetMods_Mods_LatestVersions_LatestVersions>, IGetMods_GetMods_Mods_LatestVersions_LatestVersions
    {
        public GetMods_GetMods_Mods_LatestVersions_LatestVersions(global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Alpha? alpha, global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Beta? beta, global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Release? release)
        {
            Alpha = alpha;
            Beta = beta;
            Release = release;
        }

        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Alpha? Alpha { get; }

        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Beta? Beta { get; }

        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Release? Release { get; }

        public virtual global::System.Boolean Equals(GetMods_GetMods_Mods_LatestVersions_LatestVersions? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Alpha is null && other.Alpha is null) || Alpha != null && Alpha.Equals(other.Alpha))) && ((Beta is null && other.Beta is null) || Beta != null && Beta.Equals(other.Beta)) && ((Release is null && other.Release is null) || Release != null && Release.Equals(other.Release));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMods_GetMods_Mods_LatestVersions_LatestVersions)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Alpha != null)
                {
                    hash ^= 397 * Alpha.GetHashCode();
                }

                if (Beta != null)
                {
                    hash ^= 397 * Beta.GetHashCode();
                }

                if (Release != null)
                {
                    hash ^= 397 * Release.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMods_GetMods_Mods_LatestVersions_Alpha_Version : global::System.IEquatable<GetMods_GetMods_Mods_LatestVersions_Alpha_Version>, IGetMods_GetMods_Mods_LatestVersions_Alpha_Version
    {
        public GetMods_GetMods_Mods_LatestVersions_Alpha_Version(global::System.String id, global::System.String version, global::System.String sml_Version)
        {
            Id = id;
            Version = version;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(GetMods_GetMods_Mods_LatestVersions_Alpha_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Version.Equals(other.Version) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMods_GetMods_Mods_LatestVersions_Alpha_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMods_GetMods_Mods_LatestVersions_Beta_Version : global::System.IEquatable<GetMods_GetMods_Mods_LatestVersions_Beta_Version>, IGetMods_GetMods_Mods_LatestVersions_Beta_Version
    {
        public GetMods_GetMods_Mods_LatestVersions_Beta_Version(global::System.String id, global::System.String version, global::System.String sml_Version)
        {
            Id = id;
            Version = version;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(GetMods_GetMods_Mods_LatestVersions_Beta_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Version.Equals(other.Version) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMods_GetMods_Mods_LatestVersions_Beta_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMods_GetMods_Mods_LatestVersions_Release_Version : global::System.IEquatable<GetMods_GetMods_Mods_LatestVersions_Release_Version>, IGetMods_GetMods_Mods_LatestVersions_Release_Version
    {
        public GetMods_GetMods_Mods_LatestVersions_Release_Version(global::System.String id, global::System.String version, global::System.String sml_Version)
        {
            Id = id;
            Version = version;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(GetMods_GetMods_Mods_LatestVersions_Release_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Version.Equals(other.Version) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMods_GetMods_Mods_LatestVersions_Release_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModsResult
    {
        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods GetMods { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods
    {
        public global::System.Int32 Count { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods> Mods { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_GetMods : IGetMods_GetMods
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods
    {
        public global::System.String Id { get; }

        public global::System.String Mod_reference { get; }

        public global::System.String Name { get; }

        public global::System.String? Logo { get; }

        public global::System.Int32 Views { get; }

        public global::System.Int32 Downloads { get; }

        public global::System.String Short_description { get; }

        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions LatestVersions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_Mod : IGetMods_GetMods_Mods
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_LatestVersions
    {
        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Alpha? Alpha { get; }

        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Beta? Beta { get; }

        public global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Release? Release { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_LatestVersions_LatestVersions : IGetMods_GetMods_Mods_LatestVersions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_LatestVersions_Alpha
    {
        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_LatestVersions_Alpha_Version : IGetMods_GetMods_Mods_LatestVersions_Alpha
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_LatestVersions_Beta
    {
        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_LatestVersions_Beta_Version : IGetMods_GetMods_Mods_LatestVersions_Beta
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_LatestVersions_Release
    {
        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMods_GetMods_Mods_LatestVersions_Release_Version : IGetMods_GetMods_Mods_LatestVersions_Release
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModResult : global::System.IEquatable<GetModResult>, IGetModResult
    {
        public GetModResult(global::peter_ficsit_api.GraphQL.IGetMod_Mod? mod)
        {
            Mod = mod;
        }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod? Mod { get; }

        public virtual global::System.Boolean Equals(GetModResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Mod is null && other.Mod is null) || Mod != null && Mod.Equals(other.Mod)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetModResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Mod != null)
                {
                    hash ^= 397 * Mod.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMod_Mod_Mod : global::System.IEquatable<GetMod_Mod_Mod>, IGetMod_Mod_Mod
    {
        public GetMod_Mod_Mod(global::System.String id, global::System.DateTime created_At, global::System.String name, global::System.String? full_Description, global::System.String short_Description, global::System.String? logo, global::System.String mod_Reference, global::System.String? source_Url, global::System.Boolean hidden, global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions latestVersions, global::System.Int32 downloads, global::System.Int32 views, global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors> authors)
        {
            Id = id;
            Created_at = created_At;
            Name = name;
            Full_description = full_Description;
            Short_description = short_Description;
            Logo = logo;
            Mod_reference = mod_Reference;
            Source_url = source_Url;
            Hidden = hidden;
            LatestVersions = latestVersions;
            Downloads = downloads;
            Views = views;
            Authors = authors;
        }

        public global::System.String Id { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Name { get; }

        public global::System.String? Full_description { get; }

        public global::System.String Short_description { get; }

        public global::System.String? Logo { get; }

        public global::System.String Mod_reference { get; }

        public global::System.String? Source_url { get; }

        public global::System.Boolean Hidden { get; }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions LatestVersions { get; }

        public global::System.Int32 Downloads { get; }

        public global::System.Int32 Views { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors> Authors { get; }

        public virtual global::System.Boolean Equals(GetMod_Mod_Mod? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Created_at.Equals(other.Created_at) && Name.Equals(other.Name) && ((Full_description is null && other.Full_description is null) || Full_description != null && Full_description.Equals(other.Full_description)) && Short_description.Equals(other.Short_description) && ((Logo is null && other.Logo is null) || Logo != null && Logo.Equals(other.Logo)) && Mod_reference.Equals(other.Mod_reference) && ((Source_url is null && other.Source_url is null) || Source_url != null && Source_url.Equals(other.Source_url)) && Hidden == other.Hidden && LatestVersions.Equals(other.LatestVersions) && Downloads == other.Downloads && Views == other.Views && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Authors, other.Authors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMod_Mod_Mod)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Full_description != null)
                {
                    hash ^= 397 * Full_description.GetHashCode();
                }

                hash ^= 397 * Short_description.GetHashCode();
                if (Logo != null)
                {
                    hash ^= 397 * Logo.GetHashCode();
                }

                hash ^= 397 * Mod_reference.GetHashCode();
                if (Source_url != null)
                {
                    hash ^= 397 * Source_url.GetHashCode();
                }

                hash ^= 397 * Hidden.GetHashCode();
                hash ^= 397 * LatestVersions.GetHashCode();
                hash ^= 397 * Downloads.GetHashCode();
                hash ^= 397 * Views.GetHashCode();
                foreach (var Authors_elm in Authors)
                {
                    hash ^= 397 * Authors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMod_Mod_LatestVersions_LatestVersions : global::System.IEquatable<GetMod_Mod_LatestVersions_LatestVersions>, IGetMod_Mod_LatestVersions_LatestVersions
    {
        public GetMod_Mod_LatestVersions_LatestVersions(global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Alpha? alpha, global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Beta? beta, global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Release? release)
        {
            Alpha = alpha;
            Beta = beta;
            Release = release;
        }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Alpha? Alpha { get; }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Beta? Beta { get; }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Release? Release { get; }

        public virtual global::System.Boolean Equals(GetMod_Mod_LatestVersions_LatestVersions? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Alpha is null && other.Alpha is null) || Alpha != null && Alpha.Equals(other.Alpha))) && ((Beta is null && other.Beta is null) || Beta != null && Beta.Equals(other.Beta)) && ((Release is null && other.Release is null) || Release != null && Release.Equals(other.Release));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMod_Mod_LatestVersions_LatestVersions)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Alpha != null)
                {
                    hash ^= 397 * Alpha.GetHashCode();
                }

                if (Beta != null)
                {
                    hash ^= 397 * Beta.GetHashCode();
                }

                if (Release != null)
                {
                    hash ^= 397 * Release.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMod_Mod_Authors_UserMod : global::System.IEquatable<GetMod_Mod_Authors_UserMod>, IGetMod_Mod_Authors_UserMod
    {
        public GetMod_Mod_Authors_UserMod(global::System.String role, global::System.String user_Id, global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors_User user)
        {
            Role = role;
            User_id = user_Id;
            User = user;
        }

        public global::System.String Role { get; }

        public global::System.String User_id { get; }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors_User User { get; }

        public virtual global::System.Boolean Equals(GetMod_Mod_Authors_UserMod? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Role.Equals(other.Role)) && User_id.Equals(other.User_id) && User.Equals(other.User);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMod_Mod_Authors_UserMod)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Role.GetHashCode();
                hash ^= 397 * User_id.GetHashCode();
                hash ^= 397 * User.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMod_Mod_LatestVersions_Alpha_Version : global::System.IEquatable<GetMod_Mod_LatestVersions_Alpha_Version>, IGetMod_Mod_LatestVersions_Alpha_Version
    {
        public GetMod_Mod_LatestVersions_Alpha_Version(global::System.String id, global::System.String link, global::System.String version, global::System.DateTime created_At, global::System.String sml_Version)
        {
            Id = id;
            Link = link;
            Version = version;
            Created_at = created_At;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(GetMod_Mod_LatestVersions_Alpha_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Link.Equals(other.Link) && Version.Equals(other.Version) && Created_at.Equals(other.Created_at) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMod_Mod_LatestVersions_Alpha_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Link.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMod_Mod_LatestVersions_Beta_Version : global::System.IEquatable<GetMod_Mod_LatestVersions_Beta_Version>, IGetMod_Mod_LatestVersions_Beta_Version
    {
        public GetMod_Mod_LatestVersions_Beta_Version(global::System.String id, global::System.String link, global::System.String version, global::System.DateTime created_At, global::System.String sml_Version)
        {
            Id = id;
            Link = link;
            Version = version;
            Created_at = created_At;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(GetMod_Mod_LatestVersions_Beta_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Link.Equals(other.Link) && Version.Equals(other.Version) && Created_at.Equals(other.Created_at) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMod_Mod_LatestVersions_Beta_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Link.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMod_Mod_LatestVersions_Release_Version : global::System.IEquatable<GetMod_Mod_LatestVersions_Release_Version>, IGetMod_Mod_LatestVersions_Release_Version
    {
        public GetMod_Mod_LatestVersions_Release_Version(global::System.String id, global::System.String link, global::System.String version, global::System.DateTime created_At, global::System.String sml_Version)
        {
            Id = id;
            Link = link;
            Version = version;
            Created_at = created_At;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(GetMod_Mod_LatestVersions_Release_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Link.Equals(other.Link) && Version.Equals(other.Version) && Created_at.Equals(other.Created_at) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMod_Mod_LatestVersions_Release_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Link.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetMod_Mod_Authors_User_User : global::System.IEquatable<GetMod_Mod_Authors_User_User>, IGetMod_Mod_Authors_User_User
    {
        public GetMod_Mod_Authors_User_User(global::System.String id, global::System.String username, global::System.String? avatar)
        {
            Id = id;
            Username = username;
            Avatar = avatar;
        }

        public global::System.String Id { get; }

        public global::System.String Username { get; }

        public global::System.String? Avatar { get; }

        public virtual global::System.Boolean Equals(GetMod_Mod_Authors_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Username.Equals(other.Username) && ((Avatar is null && other.Avatar is null) || Avatar != null && Avatar.Equals(other.Avatar));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMod_Mod_Authors_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Username.GetHashCode();
                if (Avatar != null)
                {
                    hash ^= 397 * Avatar.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModResult
    {
        public global::peter_ficsit_api.GraphQL.IGetMod_Mod? Mod { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod
    {
        public global::System.String Id { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Name { get; }

        public global::System.String? Full_description { get; }

        public global::System.String Short_description { get; }

        public global::System.String? Logo { get; }

        public global::System.String Mod_reference { get; }

        public global::System.String? Source_url { get; }

        public global::System.Boolean Hidden { get; }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions LatestVersions { get; }

        public global::System.Int32 Downloads { get; }

        public global::System.Int32 Views { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors> Authors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_Mod : IGetMod_Mod
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_LatestVersions
    {
        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Alpha? Alpha { get; }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Beta? Beta { get; }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Release? Release { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_LatestVersions_LatestVersions : IGetMod_Mod_LatestVersions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_Authors
    {
        public global::System.String Role { get; }

        public global::System.String User_id { get; }

        public global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors_User User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_Authors_UserMod : IGetMod_Mod_Authors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_LatestVersions_Alpha
    {
        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_LatestVersions_Alpha_Version : IGetMod_Mod_LatestVersions_Alpha
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_LatestVersions_Beta
    {
        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_LatestVersions_Beta_Version : IGetMod_Mod_LatestVersions_Beta
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_LatestVersions_Release
    {
        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_LatestVersions_Release_Version : IGetMod_Mod_LatestVersions_Release
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_Authors_User
    {
        public global::System.String Id { get; }

        public global::System.String Username { get; }

        public global::System.String? Avatar { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetMod_Mod_Authors_User_User : IGetMod_Mod_Authors_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchModsResult : global::System.IEquatable<SearchModsResult>, ISearchModsResult
    {
        public SearchModsResult(global::peter_ficsit_api.GraphQL.ISearchMods_GetMods getMods)
        {
            GetMods = getMods;
        }

        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods GetMods { get; }

        public virtual global::System.Boolean Equals(SearchModsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GetMods.Equals(other.GetMods));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchModsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GetMods.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchMods_GetMods_GetMods : global::System.IEquatable<SearchMods_GetMods_GetMods>, ISearchMods_GetMods_GetMods
    {
        public SearchMods_GetMods_GetMods(global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods> mods)
        {
            Mods = mods;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods> Mods { get; }

        public virtual global::System.Boolean Equals(SearchMods_GetMods_GetMods? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Mods, other.Mods));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchMods_GetMods_GetMods)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Mods_elm in Mods)
                {
                    hash ^= 397 * Mods_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchMods_GetMods_Mods_Mod : global::System.IEquatable<SearchMods_GetMods_Mods_Mod>, ISearchMods_GetMods_Mods_Mod
    {
        public SearchMods_GetMods_Mods_Mod(global::System.String name, global::System.String id, global::System.String short_Description, global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions latestVersions)
        {
            Name = name;
            Id = id;
            Short_description = short_Description;
            LatestVersions = latestVersions;
        }

        public global::System.String Name { get; }

        public global::System.String Id { get; }

        public global::System.String Short_description { get; }

        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions LatestVersions { get; }

        public virtual global::System.Boolean Equals(SearchMods_GetMods_Mods_Mod? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && Id.Equals(other.Id) && Short_description.Equals(other.Short_description) && LatestVersions.Equals(other.LatestVersions);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchMods_GetMods_Mods_Mod)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Short_description.GetHashCode();
                hash ^= 397 * LatestVersions.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchMods_GetMods_Mods_LatestVersions_LatestVersions : global::System.IEquatable<SearchMods_GetMods_Mods_LatestVersions_LatestVersions>, ISearchMods_GetMods_Mods_LatestVersions_LatestVersions
    {
        public SearchMods_GetMods_Mods_LatestVersions_LatestVersions(global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Alpha? alpha, global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Beta? beta, global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Release? release)
        {
            Alpha = alpha;
            Beta = beta;
            Release = release;
        }

        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Alpha? Alpha { get; }

        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Beta? Beta { get; }

        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Release? Release { get; }

        public virtual global::System.Boolean Equals(SearchMods_GetMods_Mods_LatestVersions_LatestVersions? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Alpha is null && other.Alpha is null) || Alpha != null && Alpha.Equals(other.Alpha))) && ((Beta is null && other.Beta is null) || Beta != null && Beta.Equals(other.Beta)) && ((Release is null && other.Release is null) || Release != null && Release.Equals(other.Release));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchMods_GetMods_Mods_LatestVersions_LatestVersions)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Alpha != null)
                {
                    hash ^= 397 * Alpha.GetHashCode();
                }

                if (Beta != null)
                {
                    hash ^= 397 * Beta.GetHashCode();
                }

                if (Release != null)
                {
                    hash ^= 397 * Release.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchMods_GetMods_Mods_LatestVersions_Alpha_Version : global::System.IEquatable<SearchMods_GetMods_Mods_LatestVersions_Alpha_Version>, ISearchMods_GetMods_Mods_LatestVersions_Alpha_Version
    {
        public SearchMods_GetMods_Mods_LatestVersions_Alpha_Version(global::System.String id, global::System.String link, global::System.String version, global::System.DateTime created_At, global::System.String sml_Version)
        {
            Id = id;
            Link = link;
            Version = version;
            Created_at = created_At;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(SearchMods_GetMods_Mods_LatestVersions_Alpha_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Link.Equals(other.Link) && Version.Equals(other.Version) && Created_at.Equals(other.Created_at) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchMods_GetMods_Mods_LatestVersions_Alpha_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Link.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchMods_GetMods_Mods_LatestVersions_Beta_Version : global::System.IEquatable<SearchMods_GetMods_Mods_LatestVersions_Beta_Version>, ISearchMods_GetMods_Mods_LatestVersions_Beta_Version
    {
        public SearchMods_GetMods_Mods_LatestVersions_Beta_Version(global::System.String id, global::System.String link, global::System.String version, global::System.DateTime created_At, global::System.String sml_Version)
        {
            Id = id;
            Link = link;
            Version = version;
            Created_at = created_At;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(SearchMods_GetMods_Mods_LatestVersions_Beta_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Link.Equals(other.Link) && Version.Equals(other.Version) && Created_at.Equals(other.Created_at) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchMods_GetMods_Mods_LatestVersions_Beta_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Link.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchMods_GetMods_Mods_LatestVersions_Release_Version : global::System.IEquatable<SearchMods_GetMods_Mods_LatestVersions_Release_Version>, ISearchMods_GetMods_Mods_LatestVersions_Release_Version
    {
        public SearchMods_GetMods_Mods_LatestVersions_Release_Version(global::System.String id, global::System.String link, global::System.String version, global::System.DateTime created_At, global::System.String sml_Version)
        {
            Id = id;
            Link = link;
            Version = version;
            Created_at = created_At;
            Sml_version = sml_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }

        public virtual global::System.Boolean Equals(SearchMods_GetMods_Mods_LatestVersions_Release_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Link.Equals(other.Link) && Version.Equals(other.Version) && Created_at.Equals(other.Created_at) && Sml_version.Equals(other.Sml_version);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchMods_GetMods_Mods_LatestVersions_Release_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Link.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchModsResult
    {
        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods GetMods { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods
    {
        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods> Mods { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_GetMods : ISearchMods_GetMods
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods
    {
        public global::System.String Name { get; }

        public global::System.String Id { get; }

        public global::System.String Short_description { get; }

        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions LatestVersions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_Mod : ISearchMods_GetMods_Mods
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_LatestVersions
    {
        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Alpha? Alpha { get; }

        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Beta? Beta { get; }

        public global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Release? Release { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_LatestVersions_LatestVersions : ISearchMods_GetMods_Mods_LatestVersions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_LatestVersions_Alpha
    {
        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_LatestVersions_Alpha_Version : ISearchMods_GetMods_Mods_LatestVersions_Alpha
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_LatestVersions_Beta
    {
        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_LatestVersions_Beta_Version : ISearchMods_GetMods_Mods_LatestVersions_Beta
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_LatestVersions_Release
    {
        public global::System.String Id { get; }

        public global::System.String Link { get; }

        public global::System.String Version { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Sml_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchMods_GetMods_Mods_LatestVersions_Release_Version : ISearchMods_GetMods_Mods_LatestVersions_Release
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersionsResult : global::System.IEquatable<GetSMLVersionsResult>, IGetSMLVersionsResult
    {
        public GetSMLVersionsResult(global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions getSMLVersions)
        {
            GetSMLVersions = getSMLVersions;
        }

        public global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions GetSMLVersions { get; }

        public virtual global::System.Boolean Equals(GetSMLVersionsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GetSMLVersions.Equals(other.GetSMLVersions));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSMLVersionsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GetSMLVersions.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersions_GetSMLVersions_GetSMLVersions : global::System.IEquatable<GetSMLVersions_GetSMLVersions_GetSMLVersions>, IGetSMLVersions_GetSMLVersions_GetSMLVersions
    {
        public GetSMLVersions_GetSMLVersions_GetSMLVersions(global::System.Int32 count, global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions_Sml_versions> sml_Versions)
        {
            Count = count;
            Sml_versions = sml_Versions;
        }

        public global::System.Int32 Count { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions_Sml_versions> Sml_versions { get; }

        public virtual global::System.Boolean Equals(GetSMLVersions_GetSMLVersions_GetSMLVersions? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Count == other.Count) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Sml_versions, other.Sml_versions);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSMLVersions_GetSMLVersions_GetSMLVersions)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Count.GetHashCode();
                foreach (var Sml_versions_elm in Sml_versions)
                {
                    hash ^= 397 * Sml_versions_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersions_GetSMLVersions_Sml_versions_SMLVersion : global::System.IEquatable<GetSMLVersions_GetSMLVersions_Sml_versions_SMLVersion>, IGetSMLVersions_GetSMLVersions_Sml_versions_SMLVersion
    {
        public GetSMLVersions_GetSMLVersions_Sml_versions_SMLVersion(global::System.String id, global::System.String version, global::peter_ficsit_api.GraphQL.VersionStabilities stability, global::System.String changelog, global::System.String link, global::System.DateTime date, global::System.Int32 satisfactory_Version)
        {
            Id = id;
            Version = version;
            Stability = stability;
            Changelog = changelog;
            Link = link;
            Date = date;
            Satisfactory_version = satisfactory_Version;
        }

        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::peter_ficsit_api.GraphQL.VersionStabilities Stability { get; }

        public global::System.String Changelog { get; }

        public global::System.String Link { get; }

        public global::System.DateTime Date { get; }

        public global::System.Int32 Satisfactory_version { get; }

        public virtual global::System.Boolean Equals(GetSMLVersions_GetSMLVersions_Sml_versions_SMLVersion? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Version.Equals(other.Version) && Stability.Equals(other.Stability) && Changelog.Equals(other.Changelog) && Link.Equals(other.Link) && Date.Equals(other.Date) && Satisfactory_version == other.Satisfactory_version;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSMLVersions_GetSMLVersions_Sml_versions_SMLVersion)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Stability.GetHashCode();
                hash ^= 397 * Changelog.GetHashCode();
                hash ^= 397 * Link.GetHashCode();
                hash ^= 397 * Date.GetHashCode();
                hash ^= 397 * Satisfactory_version.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetSMLVersionsResult
    {
        public global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions GetSMLVersions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetSMLVersions_GetSMLVersions
    {
        public global::System.Int32 Count { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions_Sml_versions> Sml_versions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetSMLVersions_GetSMLVersions_GetSMLVersions : IGetSMLVersions_GetSMLVersions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetSMLVersions_GetSMLVersions_Sml_versions
    {
        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::peter_ficsit_api.GraphQL.VersionStabilities Stability { get; }

        public global::System.String Changelog { get; }

        public global::System.String Link { get; }

        public global::System.DateTime Date { get; }

        public global::System.Int32 Satisfactory_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetSMLVersions_GetSMLVersions_Sml_versions_SMLVersion : IGetSMLVersions_GetSMLVersions_Sml_versions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CheckVersionUploadStateResult : global::System.IEquatable<CheckVersionUploadStateResult>, ICheckVersionUploadStateResult
    {
        public CheckVersionUploadStateResult(global::peter_ficsit_api.GraphQL.ICheckVersionUploadState_CheckVersionUploadState? checkVersionUploadState)
        {
            CheckVersionUploadState = checkVersionUploadState;
        }

        public global::peter_ficsit_api.GraphQL.ICheckVersionUploadState_CheckVersionUploadState? CheckVersionUploadState { get; }

        public virtual global::System.Boolean Equals(CheckVersionUploadStateResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CheckVersionUploadState is null && other.CheckVersionUploadState is null) || CheckVersionUploadState != null && CheckVersionUploadState.Equals(other.CheckVersionUploadState)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CheckVersionUploadStateResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CheckVersionUploadState != null)
                {
                    hash ^= 397 * CheckVersionUploadState.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CheckVersionUploadState_CheckVersionUploadState_CreateVersionResponse : global::System.IEquatable<CheckVersionUploadState_CheckVersionUploadState_CreateVersionResponse>, ICheckVersionUploadState_CheckVersionUploadState_CreateVersionResponse
    {
        public CheckVersionUploadState_CheckVersionUploadState_CreateVersionResponse(global::System.Boolean auto_Approved, global::peter_ficsit_api.GraphQL.ICheckVersionUploadState_CheckVersionUploadState_Version? version)
        {
            Auto_approved = auto_Approved;
            Version = version;
        }

        public global::System.Boolean Auto_approved { get; }

        public global::peter_ficsit_api.GraphQL.ICheckVersionUploadState_CheckVersionUploadState_Version? Version { get; }

        public virtual global::System.Boolean Equals(CheckVersionUploadState_CheckVersionUploadState_CreateVersionResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Auto_approved == other.Auto_approved) && ((Version is null && other.Version is null) || Version != null && Version.Equals(other.Version));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CheckVersionUploadState_CheckVersionUploadState_CreateVersionResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Auto_approved.GetHashCode();
                if (Version != null)
                {
                    hash ^= 397 * Version.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CheckVersionUploadState_CheckVersionUploadState_Version_Version : global::System.IEquatable<CheckVersionUploadState_CheckVersionUploadState_Version_Version>, ICheckVersionUploadState_CheckVersionUploadState_Version_Version
    {
        public CheckVersionUploadState_CheckVersionUploadState_Version_Version(global::System.String id)
        {
            Id = id;
        }

        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(CheckVersionUploadState_CheckVersionUploadState_Version_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CheckVersionUploadState_CheckVersionUploadState_Version_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICheckVersionUploadStateResult
    {
        public global::peter_ficsit_api.GraphQL.ICheckVersionUploadState_CheckVersionUploadState? CheckVersionUploadState { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICheckVersionUploadState_CheckVersionUploadState
    {
        public global::System.Boolean Auto_approved { get; }

        public global::peter_ficsit_api.GraphQL.ICheckVersionUploadState_CheckVersionUploadState_Version? Version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICheckVersionUploadState_CheckVersionUploadState_CreateVersionResponse : ICheckVersionUploadState_CheckVersionUploadState
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICheckVersionUploadState_CheckVersionUploadState_Version
    {
        public global::System.String Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICheckVersionUploadState_CheckVersionUploadState_Version_Version : ICheckVersionUploadState_CheckVersionUploadState_Version
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CreateVersionResult : global::System.IEquatable<CreateVersionResult>, ICreateVersionResult
    {
        public CreateVersionResult(global::System.String createVersion)
        {
            CreateVersion = createVersion;
        }

        public global::System.String CreateVersion { get; }

        public virtual global::System.Boolean Equals(CreateVersionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreateVersion.Equals(other.CreateVersion));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateVersionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreateVersion.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICreateVersionResult
    {
        public global::System.String CreateVersion { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class FinalizeCreateVersionResult : global::System.IEquatable<FinalizeCreateVersionResult>, IFinalizeCreateVersionResult
    {
        public FinalizeCreateVersionResult(global::System.Boolean finalizeCreateVersion)
        {
            FinalizeCreateVersion = finalizeCreateVersion;
        }

        public global::System.Boolean FinalizeCreateVersion { get; }

        public virtual global::System.Boolean Equals(FinalizeCreateVersionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (FinalizeCreateVersion == other.FinalizeCreateVersion);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FinalizeCreateVersionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * FinalizeCreateVersion.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IFinalizeCreateVersionResult
    {
        public global::System.Boolean FinalizeCreateVersion { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersionResult : global::System.IEquatable<GetModVersionResult>, IGetModVersionResult
    {
        public GetModVersionResult(global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion? getVersion)
        {
            GetVersion = getVersion;
        }

        public global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion? GetVersion { get; }

        public virtual global::System.Boolean Equals(GetModVersionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GetVersion is null && other.GetVersion is null) || GetVersion != null && GetVersion.Equals(other.GetVersion)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetModVersionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GetVersion != null)
                {
                    hash ^= 397 * GetVersion.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersion_GetVersion_Version : global::System.IEquatable<GetModVersion_GetVersion_Version>, IGetModVersion_GetVersion_Version
    {
        public GetModVersion_GetVersion_Version(global::System.String id, global::System.String version, global::peter_ficsit_api.GraphQL.VersionStabilities stability, global::System.String sml_Version, global::System.Int32 downloads, global::System.DateTime created_At, global::System.String changelog, global::System.String link, global::System.String? hash, global::System.Int32? size, global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod mod)
        {
            Id = id;
            Version = version;
            Stability = stability;
            Sml_version = sml_Version;
            Downloads = downloads;
            Created_at = created_At;
            Changelog = changelog;
            Link = link;
            Hash = hash;
            Size = size;
            Mod = mod;
        }

        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::peter_ficsit_api.GraphQL.VersionStabilities Stability { get; }

        public global::System.String Sml_version { get; }

        public global::System.Int32 Downloads { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Changelog { get; }

        public global::System.String Link { get; }

        public global::System.String? Hash { get; }

        public global::System.Int32? Size { get; }

        public global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod Mod { get; }

        public virtual global::System.Boolean Equals(GetModVersion_GetVersion_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Version.Equals(other.Version) && Stability.Equals(other.Stability) && Sml_version.Equals(other.Sml_version) && Downloads == other.Downloads && Created_at.Equals(other.Created_at) && Changelog.Equals(other.Changelog) && Link.Equals(other.Link) && ((Hash is null && other.Hash is null) || Hash != null && Hash.Equals(other.Hash)) && Size == other.Size && Mod.Equals(other.Mod);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetModVersion_GetVersion_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Version.GetHashCode();
                hash ^= 397 * Stability.GetHashCode();
                hash ^= 397 * Sml_version.GetHashCode();
                hash ^= 397 * Downloads.GetHashCode();
                hash ^= 397 * Created_at.GetHashCode();
                hash ^= 397 * Changelog.GetHashCode();
                hash ^= 397 * Link.GetHashCode();
                if (Hash != null)
                {
                    hash ^= 397 * Hash.GetHashCode();
                }

                if (Size != null)
                {
                    hash ^= 397 * Size.GetHashCode();
                }

                hash ^= 397 * Mod.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersion_GetVersion_Mod_Mod : global::System.IEquatable<GetModVersion_GetVersion_Mod_Mod>, IGetModVersion_GetVersion_Mod_Mod
    {
        public GetModVersion_GetVersion_Mod_Mod(global::System.String id, global::System.String mod_Reference, global::System.String name, global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod_Authors> authors)
        {
            Id = id;
            Mod_reference = mod_Reference;
            Name = name;
            Authors = authors;
        }

        public global::System.String Id { get; }

        public global::System.String Mod_reference { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod_Authors> Authors { get; }

        public virtual global::System.Boolean Equals(GetModVersion_GetVersion_Mod_Mod? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Mod_reference.Equals(other.Mod_reference) && Name.Equals(other.Name) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Authors, other.Authors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetModVersion_GetVersion_Mod_Mod)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Mod_reference.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                foreach (var Authors_elm in Authors)
                {
                    hash ^= 397 * Authors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersion_GetVersion_Mod_Authors_UserMod : global::System.IEquatable<GetModVersion_GetVersion_Mod_Authors_UserMod>, IGetModVersion_GetVersion_Mod_Authors_UserMod
    {
        public GetModVersion_GetVersion_Mod_Authors_UserMod(global::System.String role, global::System.String user_Id)
        {
            Role = role;
            User_id = user_Id;
        }

        public global::System.String Role { get; }

        public global::System.String User_id { get; }

        public virtual global::System.Boolean Equals(GetModVersion_GetVersion_Mod_Authors_UserMod? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Role.Equals(other.Role)) && User_id.Equals(other.User_id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetModVersion_GetVersion_Mod_Authors_UserMod)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Role.GetHashCode();
                hash ^= 397 * User_id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModVersionResult
    {
        public global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion? GetVersion { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModVersion_GetVersion
    {
        public global::System.String Id { get; }

        public global::System.String Version { get; }

        public global::peter_ficsit_api.GraphQL.VersionStabilities Stability { get; }

        public global::System.String Sml_version { get; }

        public global::System.Int32 Downloads { get; }

        public global::System.DateTime Created_at { get; }

        public global::System.String Changelog { get; }

        public global::System.String Link { get; }

        public global::System.String? Hash { get; }

        public global::System.Int32? Size { get; }

        public global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod Mod { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModVersion_GetVersion_Version : IGetModVersion_GetVersion
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModVersion_GetVersion_Mod
    {
        public global::System.String Id { get; }

        public global::System.String Mod_reference { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod_Authors> Authors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModVersion_GetVersion_Mod_Mod : IGetModVersion_GetVersion_Mod
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModVersion_GetVersion_Mod_Authors
    {
        public global::System.String Role { get; }

        public global::System.String User_id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModVersion_GetVersion_Mod_Authors_UserMod : IGetModVersion_GetVersion_Mod_Authors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersion_1Result : global::System.IEquatable<UpdateVersion_1Result>, IUpdateVersionResult
    {
        public UpdateVersion_1Result(global::peter_ficsit_api.GraphQL.IUpdateVersion_UpdateVersion updateVersion)
        {
            UpdateVersion = updateVersion;
        }

        public global::peter_ficsit_api.GraphQL.IUpdateVersion_UpdateVersion UpdateVersion { get; }

        public virtual global::System.Boolean Equals(UpdateVersion_1Result? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UpdateVersion.Equals(other.UpdateVersion));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateVersion_1Result)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UpdateVersion.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersion_UpdateVersion_Version : global::System.IEquatable<UpdateVersion_UpdateVersion_Version>, IUpdateVersion_UpdateVersion_Version
    {
        public UpdateVersion_UpdateVersion_Version(global::System.String id)
        {
            Id = id;
        }

        public global::System.String Id { get; }

        public virtual global::System.Boolean Equals(UpdateVersion_UpdateVersion_Version? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateVersion_UpdateVersion_Version)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IUpdateVersionResult
    {
        public global::peter_ficsit_api.GraphQL.IUpdateVersion_UpdateVersion UpdateVersion { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IUpdateVersion_UpdateVersion
    {
        public global::System.String Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IUpdateVersion_UpdateVersion_Version : IUpdateVersion_UpdateVersion
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UploadVersionPartResult : global::System.IEquatable<UploadVersionPartResult>, IUploadVersionPartResult
    {
        public UploadVersionPartResult(global::System.Boolean uploadVersionPart)
        {
            UploadVersionPart = uploadVersionPart;
        }

        public global::System.Boolean UploadVersionPart { get; }

        public virtual global::System.Boolean Equals(UploadVersionPartResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UploadVersionPart == other.UploadVersionPart);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UploadVersionPartResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UploadVersionPart.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IUploadVersionPartResult
    {
        public global::System.Boolean UploadVersionPart { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class NewVersionInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _versionStabilitiesFormatter = default !;
        public global::System.String TypeName => "NewVersion";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _versionStabilitiesFormatter = serializerResolver.GetInputValueFormatter("VersionStabilities");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::peter_ficsit_api.GraphQL.NewVersion;
            var inputInfo = runtimeValue as global::peter_ficsit_api.GraphQL.State.INewVersionInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsChangelogSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("changelog", FormatChangelog(input.Changelog)));
            }

            if (inputInfo.IsStabilitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("stability", FormatStability(input.Stability)));
            }

            return fields;
        }

        private global::System.Object? FormatChangelog(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatStability(global::peter_ficsit_api.GraphQL.VersionStabilities input)
        {
            return _versionStabilitiesFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class NewVersion : global::peter_ficsit_api.GraphQL.State.INewVersionInfo, global::System.IEquatable<NewVersion>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((NewVersion)obj);
        }

        public virtual global::System.Boolean Equals(NewVersion? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Changelog.Equals(other.Changelog)) && Stability.Equals(other.Stability);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Changelog.GetHashCode();
                hash ^= 397 * Stability.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_changelog = default !;
        private global::System.Boolean _set_changelog;
        private global::peter_ficsit_api.GraphQL.VersionStabilities _value_stability;
        private global::System.Boolean _set_stability;
        public global::System.String Changelog
        {
            get => _value_changelog;
            set
            {
                _set_changelog = true;
                _value_changelog = value;
            }
        }

        global::System.Boolean global::peter_ficsit_api.GraphQL.State.INewVersionInfo.IsChangelogSet => _set_changelog;
        public global::peter_ficsit_api.GraphQL.VersionStabilities Stability
        {
            get => _value_stability;
            set
            {
                _set_stability = true;
                _value_stability = value;
            }
        }

        global::System.Boolean global::peter_ficsit_api.GraphQL.State.INewVersionInfo.IsStabilitySet => _set_stability;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersionInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _versionStabilitiesFormatter = default !;
        public global::System.String TypeName => "UpdateVersion";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _versionStabilitiesFormatter = serializerResolver.GetInputValueFormatter("VersionStabilities");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::peter_ficsit_api.GraphQL.UpdateVersion;
            var inputInfo = runtimeValue as global::peter_ficsit_api.GraphQL.State.IUpdateVersionInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsChangelogSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("changelog", FormatChangelog(input.Changelog)));
            }

            if (inputInfo.IsStabilitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("stability", FormatStability(input.Stability)));
            }

            return fields;
        }

        private global::System.Object? FormatChangelog(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatStability(global::peter_ficsit_api.GraphQL.VersionStabilities? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _versionStabilitiesFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersion : global::peter_ficsit_api.GraphQL.State.IUpdateVersionInfo, global::System.IEquatable<UpdateVersion>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateVersion)obj);
        }

        public virtual global::System.Boolean Equals(UpdateVersion? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Changelog is null && other.Changelog is null) || Changelog != null && Changelog.Equals(other.Changelog))) && ((Stability is null && other.Stability is null) || Stability != null && Stability.Equals(other.Stability));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Changelog != null)
                {
                    hash ^= 397 * Changelog.GetHashCode();
                }

                if (Stability != null)
                {
                    hash ^= 397 * Stability.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_changelog;
        private global::System.Boolean _set_changelog;
        private global::peter_ficsit_api.GraphQL.VersionStabilities? _value_stability;
        private global::System.Boolean _set_stability;
        public global::System.String? Changelog
        {
            get => _value_changelog;
            set
            {
                _set_changelog = true;
                _value_changelog = value;
            }
        }

        global::System.Boolean global::peter_ficsit_api.GraphQL.State.IUpdateVersionInfo.IsChangelogSet => _set_changelog;
        public global::peter_ficsit_api.GraphQL.VersionStabilities? Stability
        {
            get => _value_stability;
            set
            {
                _set_stability = true;
                _value_stability = value;
            }
        }

        global::System.Boolean global::peter_ficsit_api.GraphQL.State.IUpdateVersionInfo.IsStabilitySet => _set_stability;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public enum Order
    {
        Asc,
        Desc
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OrderSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Order>
    {
        public global::System.String TypeName => "Order";
        public Order Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "asc" => Order.Asc,
                "desc" => Order.Desc,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                Order.Asc => "asc",
                Order.Desc => "desc",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public enum ModFields
    {
        CreatedAt,
        UpdatedAt,
        Name,
        Views,
        Downloads,
        Hotness,
        Popularity,
        LastVersionDate,
        Search
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ModFieldsSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ModFields>
    {
        public global::System.String TypeName => "ModFields";
        public ModFields Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "created_at" => ModFields.CreatedAt,
                "updated_at" => ModFields.UpdatedAt,
                "name" => ModFields.Name,
                "views" => ModFields.Views,
                "downloads" => ModFields.Downloads,
                "hotness" => ModFields.Hotness,
                "popularity" => ModFields.Popularity,
                "last_version_date" => ModFields.LastVersionDate,
                "search" => ModFields.Search,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ModFields.CreatedAt => "created_at",
                ModFields.UpdatedAt => "updated_at",
                ModFields.Name => "name",
                ModFields.Views => "views",
                ModFields.Downloads => "downloads",
                ModFields.Hotness => "hotness",
                ModFields.Popularity => "popularity",
                ModFields.LastVersionDate => "last_version_date",
                ModFields.Search => "search",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public enum VersionStabilities
    {
        Alpha,
        Beta,
        Release
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class VersionStabilitiesSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, VersionStabilities>
    {
        public global::System.String TypeName => "VersionStabilities";
        public VersionStabilities Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "alpha" => VersionStabilities.Alpha,
                "beta" => VersionStabilities.Beta,
                "release" => VersionStabilities.Release,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                VersionStabilities.Alpha => "alpha",
                VersionStabilities.Beta => "beta",
                VersionStabilities.Release => "release",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMods GraphQL operation
    /// <code>
    /// query GetMods($offset: Int!, $limit: Int!, $search: String, $order: Order, $orderBy: ModFields) {
    ///   getMods(filter: { limit: $limit, offset: $offset, search: $search, order: $order, order_by: $orderBy }) {
    ///     __typename
    ///     count
    ///     mods {
    ///       __typename
    ///       id
    ///       mod_reference
    ///       name
    ///       logo
    ///       views
    ///       downloads
    ///       short_description
    ///       latestVersions {
    ///         __typename
    ///         alpha {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///         beta {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///         release {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetModsQueryDocument()
        {
        }

        public static GetModsQueryDocument Instance { get; } = new GetModsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x73, 0x28, 0x24, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x3a, 0x20, 0x4d, 0x6f, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x73, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x20, 0x24, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x20, 0x76, 0x69, 0x65, 0x77, 0x73, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x62, 0x65, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c4e2443f02d602db665ee65838bc1ba0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMods GraphQL operation
    /// <code>
    /// query GetMods($offset: Int!, $limit: Int!, $search: String, $order: Order, $orderBy: ModFields) {
    ///   getMods(filter: { limit: $limit, offset: $offset, search: $search, order: $order, order_by: $orderBy }) {
    ///     __typename
    ///     count
    ///     mods {
    ///       __typename
    ///       id
    ///       mod_reference
    ///       name
    ///       logo
    ///       views
    ///       downloads
    ///       short_description
    ///       latestVersions {
    ///         __typename
    ///         alpha {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///         beta {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///         release {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModsQuery : global::peter_ficsit_api.GraphQL.IGetModsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetModsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _orderFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _modFieldsFormatter;
        public GetModsQuery(global::StrawberryShake.IOperationExecutor<IGetModsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _orderFormatter = serializerResolver.GetInputValueFormatter("Order");
            _modFieldsFormatter = serializerResolver.GetInputValueFormatter("ModFields");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetModsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetModsResult>> ExecuteAsync(global::System.Int32 offset, global::System.Int32 limit, global::System.String? search, global::peter_ficsit_api.GraphQL.Order? order, global::peter_ficsit_api.GraphQL.ModFields? orderBy, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(offset, limit, search, order, orderBy);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetModsResult>> Watch(global::System.Int32 offset, global::System.Int32 limit, global::System.String? search, global::peter_ficsit_api.GraphQL.Order? order, global::peter_ficsit_api.GraphQL.ModFields? orderBy, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(offset, limit, search, order, orderBy);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 offset, global::System.Int32 limit, global::System.String? search, global::peter_ficsit_api.GraphQL.Order? order, global::peter_ficsit_api.GraphQL.ModFields? orderBy)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("offset", FormatOffset(offset));
            variables.Add("limit", FormatLimit(limit));
            variables.Add("search", FormatSearch(search));
            variables.Add("order", FormatOrder(order));
            variables.Add("orderBy", FormatOrderBy(orderBy));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetModsQueryDocument.Instance.Hash.Value, name: "GetMods", document: GetModsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatOffset(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatLimit(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearch(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOrder(global::peter_ficsit_api.GraphQL.Order? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _orderFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOrderBy(global::peter_ficsit_api.GraphQL.ModFields? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _modFieldsFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMods GraphQL operation
    /// <code>
    /// query GetMods($offset: Int!, $limit: Int!, $search: String, $order: Order, $orderBy: ModFields) {
    ///   getMods(filter: { limit: $limit, offset: $offset, search: $search, order: $order, order_by: $orderBy }) {
    ///     __typename
    ///     count
    ///     mods {
    ///       __typename
    ///       id
    ///       mod_reference
    ///       name
    ///       logo
    ///       views
    ///       downloads
    ///       short_description
    ///       latestVersions {
    ///         __typename
    ///         alpha {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///         beta {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///         release {
    ///           __typename
    ///           id
    ///           version
    ///           sml_version
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetModsResult>> ExecuteAsync(global::System.Int32 offset, global::System.Int32 limit, global::System.String? search, global::peter_ficsit_api.GraphQL.Order? order, global::peter_ficsit_api.GraphQL.ModFields? orderBy, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetModsResult>> Watch(global::System.Int32 offset, global::System.Int32 limit, global::System.String? search, global::peter_ficsit_api.GraphQL.Order? order, global::peter_ficsit_api.GraphQL.ModFields? orderBy, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetMod GraphQL operation
    /// <code>
    /// query GetMod($mod: String!) {
    ///   mod: getModByIdOrReference(modIdOrReference: $mod) {
    ///     __typename
    ///     id
    ///     created_at
    ///     name
    ///     full_description
    ///     short_description
    ///     logo
    ///     mod_reference
    ///     source_url
    ///     hidden
    ///     latestVersions {
    ///       __typename
    ///       alpha {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///       beta {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///       release {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///     }
    ///     downloads
    ///     views
    ///     authors {
    ///       __typename
    ///       role
    ///       user_id
    ///       user {
    ///         __typename
    ///         id
    ///         username
    ///         avatar
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModQueryDocument : global::StrawberryShake.IDocument
    {
        private GetModQueryDocument()
        {
        }

        public static GetModQueryDocument Instance { get; } = new GetModQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x64, 0x3a, 0x20, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x42, 0x79, 0x49, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x28, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x20, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x20, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x62, 0x65, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x20, 0x76, 0x69, 0x65, 0x77, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9055a1b903695e41ce4a4c8de92af4fa");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMod GraphQL operation
    /// <code>
    /// query GetMod($mod: String!) {
    ///   mod: getModByIdOrReference(modIdOrReference: $mod) {
    ///     __typename
    ///     id
    ///     created_at
    ///     name
    ///     full_description
    ///     short_description
    ///     logo
    ///     mod_reference
    ///     source_url
    ///     hidden
    ///     latestVersions {
    ///       __typename
    ///       alpha {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///       beta {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///       release {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///     }
    ///     downloads
    ///     views
    ///     authors {
    ///       __typename
    ///       role
    ///       user_id
    ///       user {
    ///         __typename
    ///         id
    ///         username
    ///         avatar
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModQuery : global::peter_ficsit_api.GraphQL.IGetModQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetModResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetModQuery(global::StrawberryShake.IOperationExecutor<IGetModResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetModResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetModResult>> ExecuteAsync(global::System.String mod, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(mod);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetModResult>> Watch(global::System.String mod, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(mod);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String mod)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("mod", FormatMod(mod));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetModQueryDocument.Instance.Hash.Value, name: "GetMod", document: GetModQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMod(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMod GraphQL operation
    /// <code>
    /// query GetMod($mod: String!) {
    ///   mod: getModByIdOrReference(modIdOrReference: $mod) {
    ///     __typename
    ///     id
    ///     created_at
    ///     name
    ///     full_description
    ///     short_description
    ///     logo
    ///     mod_reference
    ///     source_url
    ///     hidden
    ///     latestVersions {
    ///       __typename
    ///       alpha {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///       beta {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///       release {
    ///         __typename
    ///         id
    ///         link
    ///         version
    ///         created_at
    ///         sml_version
    ///       }
    ///     }
    ///     downloads
    ///     views
    ///     authors {
    ///       __typename
    ///       role
    ///       user_id
    ///       user {
    ///         __typename
    ///         id
    ///         username
    ///         avatar
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetModResult>> ExecuteAsync(global::System.String mod, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetModResult>> Watch(global::System.String mod, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SearchMods GraphQL operation
    /// <code>
    /// query SearchMods($searchterm: String, $searchlimit: Int) {
    ///   getMods(filter: { search: $searchterm, limit: $searchlimit }) {
    ///     __typename
    ///     mods {
    ///       __typename
    ///       name
    ///       id
    ///       short_description
    ///       latestVersions {
    ///         __typename
    ///         alpha {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///         beta {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///         release {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchModsQueryDocument : global::StrawberryShake.IDocument
    {
        private SearchModsQueryDocument()
        {
        }

        public static SearchModsQueryDocument Instance { get; } = new SearchModsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x73, 0x28, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x73, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x74, 0x65, 0x72, 0x6d, 0x2c, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x62, 0x65, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a22998f874c6b7e1fd3b10f834ac0713");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SearchMods GraphQL operation
    /// <code>
    /// query SearchMods($searchterm: String, $searchlimit: Int) {
    ///   getMods(filter: { search: $searchterm, limit: $searchlimit }) {
    ///     __typename
    ///     mods {
    ///       __typename
    ///       name
    ///       id
    ///       short_description
    ///       latestVersions {
    ///         __typename
    ///         alpha {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///         beta {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///         release {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchModsQuery : global::peter_ficsit_api.GraphQL.ISearchModsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISearchModsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public SearchModsQuery(global::StrawberryShake.IOperationExecutor<ISearchModsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISearchModsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISearchModsResult>> ExecuteAsync(global::System.String? searchterm, global::System.Int32? searchlimit, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(searchterm, searchlimit);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISearchModsResult>> Watch(global::System.String? searchterm, global::System.Int32? searchlimit, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(searchterm, searchlimit);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? searchterm, global::System.Int32? searchlimit)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("searchterm", FormatSearchterm(searchterm));
            variables.Add("searchlimit", FormatSearchlimit(searchlimit));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SearchModsQueryDocument.Instance.Hash.Value, name: "SearchMods", document: SearchModsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSearchterm(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatSearchlimit(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SearchMods GraphQL operation
    /// <code>
    /// query SearchMods($searchterm: String, $searchlimit: Int) {
    ///   getMods(filter: { search: $searchterm, limit: $searchlimit }) {
    ///     __typename
    ///     mods {
    ///       __typename
    ///       name
    ///       id
    ///       short_description
    ///       latestVersions {
    ///         __typename
    ///         alpha {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///         beta {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///         release {
    ///           __typename
    ///           id
    ///           link
    ///           version
    ///           created_at
    ///           sml_version
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISearchModsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISearchModsResult>> ExecuteAsync(global::System.String? searchterm, global::System.Int32? searchlimit, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISearchModsResult>> Watch(global::System.String? searchterm, global::System.Int32? searchlimit, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSMLVersions GraphQL operation
    /// <code>
    /// query GetSMLVersions($limit: Int!, $offset: Int!) {
    ///   getSMLVersions(filter: { limit: $limit, offset: $offset }) {
    ///     __typename
    ///     count
    ///     sml_versions {
    ///       __typename
    ///       id
    ///       version
    ///       stability
    ///       changelog
    ///       link
    ///       date
    ///       satisfactory_version
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersionsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSMLVersionsQueryDocument()
        {
        }

        public static GetSMLVersionsQueryDocument Instance { get; } = new GetSMLVersionsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x4d, 0x4c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x74, 0x53, 0x4d, 0x4c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x20, 0x24, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c2264534c3521b07bfd551a474e38f44");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSMLVersions GraphQL operation
    /// <code>
    /// query GetSMLVersions($limit: Int!, $offset: Int!) {
    ///   getSMLVersions(filter: { limit: $limit, offset: $offset }) {
    ///     __typename
    ///     count
    ///     sml_versions {
    ///       __typename
    ///       id
    ///       version
    ///       stability
    ///       changelog
    ///       link
    ///       date
    ///       satisfactory_version
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersionsQuery : global::peter_ficsit_api.GraphQL.IGetSMLVersionsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSMLVersionsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetSMLVersionsQuery(global::StrawberryShake.IOperationExecutor<IGetSMLVersionsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSMLVersionsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSMLVersionsResult>> ExecuteAsync(global::System.Int32 limit, global::System.Int32 offset, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(limit, offset);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSMLVersionsResult>> Watch(global::System.Int32 limit, global::System.Int32 offset, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(limit, offset);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 limit, global::System.Int32 offset)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("limit", FormatLimit(limit));
            variables.Add("offset", FormatOffset(offset));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSMLVersionsQueryDocument.Instance.Hash.Value, name: "GetSMLVersions", document: GetSMLVersionsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatLimit(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatOffset(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSMLVersions GraphQL operation
    /// <code>
    /// query GetSMLVersions($limit: Int!, $offset: Int!) {
    ///   getSMLVersions(filter: { limit: $limit, offset: $offset }) {
    ///     __typename
    ///     count
    ///     sml_versions {
    ///       __typename
    ///       id
    ///       version
    ///       stability
    ///       changelog
    ///       link
    ///       date
    ///       satisfactory_version
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetSMLVersionsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSMLVersionsResult>> ExecuteAsync(global::System.Int32 limit, global::System.Int32 offset, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSMLVersionsResult>> Watch(global::System.Int32 limit, global::System.Int32 offset, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CheckVersionUploadState GraphQL operation
    /// <code>
    /// query CheckVersionUploadState($modId: ModID!, $versionId: VersionID!) {
    ///   checkVersionUploadState(modId: $modId, versionId: $versionId) {
    ///     __typename
    ///     auto_approved
    ///     version {
    ///       __typename
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CheckVersionUploadStateQueryDocument : global::StrawberryShake.IDocument
    {
        private CheckVersionUploadStateQueryDocument()
        {
        }

        public static CheckVersionUploadStateQueryDocument Instance { get; } = new CheckVersionUploadStateQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x4d, 0x6f, 0x64, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x28, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x2c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6db94483dc2e8d53d13d31281f45a5ba");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CheckVersionUploadState GraphQL operation
    /// <code>
    /// query CheckVersionUploadState($modId: ModID!, $versionId: VersionID!) {
    ///   checkVersionUploadState(modId: $modId, versionId: $versionId) {
    ///     __typename
    ///     auto_approved
    ///     version {
    ///       __typename
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CheckVersionUploadStateQuery : global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICheckVersionUploadStateResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _modIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _versionIDFormatter;
        public CheckVersionUploadStateQuery(global::StrawberryShake.IOperationExecutor<ICheckVersionUploadStateResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _modIDFormatter = serializerResolver.GetInputValueFormatter("ModID");
            _versionIDFormatter = serializerResolver.GetInputValueFormatter("VersionID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICheckVersionUploadStateResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICheckVersionUploadStateResult>> ExecuteAsync(global::System.String modId, global::System.String versionId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(modId, versionId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICheckVersionUploadStateResult>> Watch(global::System.String modId, global::System.String versionId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(modId, versionId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String modId, global::System.String versionId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("modId", FormatModId(modId));
            variables.Add("versionId", FormatVersionId(versionId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CheckVersionUploadStateQueryDocument.Instance.Hash.Value, name: "CheckVersionUploadState", document: CheckVersionUploadStateQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _modIDFormatter.Format(value);
        }

        private global::System.Object? FormatVersionId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _versionIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CheckVersionUploadState GraphQL operation
    /// <code>
    /// query CheckVersionUploadState($modId: ModID!, $versionId: VersionID!) {
    ///   checkVersionUploadState(modId: $modId, versionId: $versionId) {
    ///     __typename
    ///     auto_approved
    ///     version {
    ///       __typename
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICheckVersionUploadStateQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICheckVersionUploadStateResult>> ExecuteAsync(global::System.String modId, global::System.String versionId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICheckVersionUploadStateResult>> Watch(global::System.String modId, global::System.String versionId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateVersion GraphQL operation
    /// <code>
    /// mutation CreateVersion($modId: ModID!) {
    ///   createVersion(modId: $modId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CreateVersionMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateVersionMutationDocument()
        {
        }

        public static CreateVersionMutationDocument Instance { get; } = new CreateVersionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x4d, 0x6f, 0x64, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a0e802b05e0f3f4f083ac3a3c637b576");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateVersion GraphQL operation
    /// <code>
    /// mutation CreateVersion($modId: ModID!) {
    ///   createVersion(modId: $modId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CreateVersionMutation : global::peter_ficsit_api.GraphQL.ICreateVersionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateVersionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _modIDFormatter;
        public CreateVersionMutation(global::StrawberryShake.IOperationExecutor<ICreateVersionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _modIDFormatter = serializerResolver.GetInputValueFormatter("ModID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateVersionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateVersionResult>> ExecuteAsync(global::System.String modId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(modId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateVersionResult>> Watch(global::System.String modId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(modId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String modId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("modId", FormatModId(modId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateVersionMutationDocument.Instance.Hash.Value, name: "CreateVersion", document: CreateVersionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _modIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateVersion GraphQL operation
    /// <code>
    /// mutation CreateVersion($modId: ModID!) {
    ///   createVersion(modId: $modId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICreateVersionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateVersionResult>> ExecuteAsync(global::System.String modId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateVersionResult>> Watch(global::System.String modId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FinalizeCreateVersion GraphQL operation
    /// <code>
    /// mutation FinalizeCreateVersion($modId: ModID!, $versionId: VersionID!, $version: NewVersion!) {
    ///   finalizeCreateVersion(modId: $modId, versionId: $versionId, version: $version)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class FinalizeCreateVersionMutationDocument : global::StrawberryShake.IDocument
    {
        private FinalizeCreateVersionMutationDocument()
        {
        }

        public static FinalizeCreateVersionMutationDocument Instance { get; } = new FinalizeCreateVersionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x4d, 0x6f, 0x64, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x2c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5da490e2edb078ef8c1e79235df6e770");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FinalizeCreateVersion GraphQL operation
    /// <code>
    /// mutation FinalizeCreateVersion($modId: ModID!, $versionId: VersionID!, $version: NewVersion!) {
    ///   finalizeCreateVersion(modId: $modId, versionId: $versionId, version: $version)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class FinalizeCreateVersionMutation : global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFinalizeCreateVersionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _modIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _versionIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _newVersionFormatter;
        public FinalizeCreateVersionMutation(global::StrawberryShake.IOperationExecutor<IFinalizeCreateVersionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _modIDFormatter = serializerResolver.GetInputValueFormatter("ModID");
            _versionIDFormatter = serializerResolver.GetInputValueFormatter("VersionID");
            _newVersionFormatter = serializerResolver.GetInputValueFormatter("NewVersion");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFinalizeCreateVersionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFinalizeCreateVersionResult>> ExecuteAsync(global::System.String modId, global::System.String versionId, global::peter_ficsit_api.GraphQL.NewVersion version, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(modId, versionId, version);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFinalizeCreateVersionResult>> Watch(global::System.String modId, global::System.String versionId, global::peter_ficsit_api.GraphQL.NewVersion version, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(modId, versionId, version);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String modId, global::System.String versionId, global::peter_ficsit_api.GraphQL.NewVersion version)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("modId", FormatModId(modId));
            variables.Add("versionId", FormatVersionId(versionId));
            variables.Add("version", FormatVersion(version));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FinalizeCreateVersionMutationDocument.Instance.Hash.Value, name: "FinalizeCreateVersion", document: FinalizeCreateVersionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _modIDFormatter.Format(value);
        }

        private global::System.Object? FormatVersionId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _versionIDFormatter.Format(value);
        }

        private global::System.Object? FormatVersion(global::peter_ficsit_api.GraphQL.NewVersion value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _newVersionFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the FinalizeCreateVersion GraphQL operation
    /// <code>
    /// mutation FinalizeCreateVersion($modId: ModID!, $versionId: VersionID!, $version: NewVersion!) {
    ///   finalizeCreateVersion(modId: $modId, versionId: $versionId, version: $version)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IFinalizeCreateVersionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFinalizeCreateVersionResult>> ExecuteAsync(global::System.String modId, global::System.String versionId, global::peter_ficsit_api.GraphQL.NewVersion version, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFinalizeCreateVersionResult>> Watch(global::System.String modId, global::System.String versionId, global::peter_ficsit_api.GraphQL.NewVersion version, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetModVersion GraphQL operation
    /// <code>
    /// query GetModVersion($version: VersionID!) {
    ///   getVersion(versionId: $version) {
    ///     __typename
    ///     id
    ///     version
    ///     stability
    ///     sml_version
    ///     downloads
    ///     created_at
    ///     changelog
    ///     link
    ///     hash
    ///     size
    ///     mod {
    ///       __typename
    ///       id
    ///       mod_reference
    ///       name
    ///       authors {
    ///         __typename
    ///         role
    ///         user_id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersionQueryDocument : global::StrawberryShake.IDocument
    {
        private GetModVersionQueryDocument()
        {
        }

        public static GetModVersionQueryDocument Instance { get; } = new GetModVersionQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x73, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "af3f0f9cd1a7866f16ff3d4535c9258e");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetModVersion GraphQL operation
    /// <code>
    /// query GetModVersion($version: VersionID!) {
    ///   getVersion(versionId: $version) {
    ///     __typename
    ///     id
    ///     version
    ///     stability
    ///     sml_version
    ///     downloads
    ///     created_at
    ///     changelog
    ///     link
    ///     hash
    ///     size
    ///     mod {
    ///       __typename
    ///       id
    ///       mod_reference
    ///       name
    ///       authors {
    ///         __typename
    ///         role
    ///         user_id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersionQuery : global::peter_ficsit_api.GraphQL.IGetModVersionQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetModVersionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _versionIDFormatter;
        public GetModVersionQuery(global::StrawberryShake.IOperationExecutor<IGetModVersionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _versionIDFormatter = serializerResolver.GetInputValueFormatter("VersionID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetModVersionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetModVersionResult>> ExecuteAsync(global::System.String version, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(version);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetModVersionResult>> Watch(global::System.String version, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(version);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String version)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("version", FormatVersion(version));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetModVersionQueryDocument.Instance.Hash.Value, name: "GetModVersion", document: GetModVersionQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatVersion(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _versionIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetModVersion GraphQL operation
    /// <code>
    /// query GetModVersion($version: VersionID!) {
    ///   getVersion(versionId: $version) {
    ///     __typename
    ///     id
    ///     version
    ///     stability
    ///     sml_version
    ///     downloads
    ///     created_at
    ///     changelog
    ///     link
    ///     hash
    ///     size
    ///     mod {
    ///       __typename
    ///       id
    ///       mod_reference
    ///       name
    ///       authors {
    ///         __typename
    ///         role
    ///         user_id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetModVersionQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetModVersionResult>> ExecuteAsync(global::System.String version, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetModVersionResult>> Watch(global::System.String version, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateVersion GraphQL operation
    /// <code>
    /// mutation UpdateVersion($versionId: VersionID!, $version: UpdateVersion!) {
    ///   updateVersion(versionId: $versionId, version: $version) {
    ///     __typename
    ///     id
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersionMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateVersionMutationDocument()
        {
        }

        public static UpdateVersionMutationDocument Instance { get; } = new UpdateVersionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7f8989a338138b07c2b2b2011e6c50c1");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateVersion GraphQL operation
    /// <code>
    /// mutation UpdateVersion($versionId: VersionID!, $version: UpdateVersion!) {
    ///   updateVersion(versionId: $versionId, version: $version) {
    ///     __typename
    ///     id
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersionMutation : global::peter_ficsit_api.GraphQL.IUpdateVersionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateVersionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _versionIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _updateVersionFormatter;
        public UpdateVersionMutation(global::StrawberryShake.IOperationExecutor<IUpdateVersionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _versionIDFormatter = serializerResolver.GetInputValueFormatter("VersionID");
            _updateVersionFormatter = serializerResolver.GetInputValueFormatter("UpdateVersion");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateVersionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateVersionResult>> ExecuteAsync(global::System.String versionId, global::peter_ficsit_api.GraphQL.UpdateVersion version, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(versionId, version);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateVersionResult>> Watch(global::System.String versionId, global::peter_ficsit_api.GraphQL.UpdateVersion version, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(versionId, version);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String versionId, global::peter_ficsit_api.GraphQL.UpdateVersion version)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("versionId", FormatVersionId(versionId));
            variables.Add("version", FormatVersion(version));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateVersionMutationDocument.Instance.Hash.Value, name: "UpdateVersion", document: UpdateVersionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatVersionId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _versionIDFormatter.Format(value);
        }

        private global::System.Object? FormatVersion(global::peter_ficsit_api.GraphQL.UpdateVersion value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _updateVersionFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateVersion GraphQL operation
    /// <code>
    /// mutation UpdateVersion($versionId: VersionID!, $version: UpdateVersion!) {
    ///   updateVersion(versionId: $versionId, version: $version) {
    ///     __typename
    ///     id
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IUpdateVersionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateVersionResult>> ExecuteAsync(global::System.String versionId, global::peter_ficsit_api.GraphQL.UpdateVersion version, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateVersionResult>> Watch(global::System.String versionId, global::peter_ficsit_api.GraphQL.UpdateVersion version, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UploadVersionPart GraphQL operation
    /// <code>
    /// mutation UploadVersionPart($modId: ModID!, $versionId: VersionID!, $part: Int!, $file: Upload!) {
    ///   uploadVersionPart(modId: $modId, versionId: $versionId, part: $part, file: $file)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UploadVersionPartMutationDocument : global::StrawberryShake.IDocument
    {
        private UploadVersionPartMutationDocument()
        {
        }

        public static UploadVersionPartMutationDocument Instance { get; } = new UploadVersionPartMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x4d, 0x6f, 0x64, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x28, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x49, 0x64, 0x2c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x72, 0x74, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "eda8960cd591f289fcbc42b711a6d09a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UploadVersionPart GraphQL operation
    /// <code>
    /// mutation UploadVersionPart($modId: ModID!, $versionId: VersionID!, $part: Int!, $file: Upload!) {
    ///   uploadVersionPart(modId: $modId, versionId: $versionId, part: $part, file: $file)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UploadVersionPartMutation : global::peter_ficsit_api.GraphQL.IUploadVersionPartMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUploadVersionPartResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _modIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _versionIDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uploadFormatter;
        public UploadVersionPartMutation(global::StrawberryShake.IOperationExecutor<IUploadVersionPartResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _modIDFormatter = serializerResolver.GetInputValueFormatter("ModID");
            _versionIDFormatter = serializerResolver.GetInputValueFormatter("VersionID");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _uploadFormatter = serializerResolver.GetInputValueFormatter("Upload");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUploadVersionPartResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUploadVersionPartResult>> ExecuteAsync(global::System.String modId, global::System.String versionId, global::System.Int32 part, global::peter_ficsit_api.UploadData file, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(modId, versionId, part, file);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUploadVersionPartResult>> Watch(global::System.String modId, global::System.String versionId, global::System.Int32 part, global::peter_ficsit_api.UploadData file, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(modId, versionId, part, file);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String modId, global::System.String versionId, global::System.Int32 part, global::peter_ficsit_api.UploadData file)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("modId", FormatModId(modId));
            variables.Add("versionId", FormatVersionId(versionId));
            variables.Add("part", FormatPart(part));
            variables.Add("file", FormatFile(file));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UploadVersionPartMutationDocument.Instance.Hash.Value, name: "UploadVersionPart", document: UploadVersionPartMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _modIDFormatter.Format(value);
        }

        private global::System.Object? FormatVersionId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _versionIDFormatter.Format(value);
        }

        private global::System.Object? FormatPart(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatFile(global::peter_ficsit_api.UploadData value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _uploadFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UploadVersionPart GraphQL operation
    /// <code>
    /// mutation UploadVersionPart($modId: ModID!, $versionId: VersionID!, $part: Int!, $file: Upload!) {
    ///   uploadVersionPart(modId: $modId, versionId: $versionId, part: $part, file: $file)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IUploadVersionPartMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUploadVersionPartResult>> ExecuteAsync(global::System.String modId, global::System.String versionId, global::System.Int32 part, global::peter_ficsit_api.UploadData file, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUploadVersionPartResult>> Watch(global::System.String modId, global::System.String versionId, global::System.Int32 part, global::peter_ficsit_api.UploadData file, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ficsit_api GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ficsit_api : global::peter_ficsit_api.GraphQL.Ificsit_api
    {
        private readonly global::peter_ficsit_api.GraphQL.IGetModsQuery _getMods;
        private readonly global::peter_ficsit_api.GraphQL.IGetModQuery _getMod;
        private readonly global::peter_ficsit_api.GraphQL.ISearchModsQuery _searchMods;
        private readonly global::peter_ficsit_api.GraphQL.IGetSMLVersionsQuery _getSMLVersions;
        private readonly global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateQuery _checkVersionUploadState;
        private readonly global::peter_ficsit_api.GraphQL.ICreateVersionMutation _createVersion;
        private readonly global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionMutation _finalizeCreateVersion;
        private readonly global::peter_ficsit_api.GraphQL.IGetModVersionQuery _getModVersion;
        private readonly global::peter_ficsit_api.GraphQL.IUpdateVersionMutation _updateVersion;
        private readonly global::peter_ficsit_api.GraphQL.IUploadVersionPartMutation _uploadVersionPart;
        public ficsit_api(global::peter_ficsit_api.GraphQL.IGetModsQuery getMods, global::peter_ficsit_api.GraphQL.IGetModQuery getMod, global::peter_ficsit_api.GraphQL.ISearchModsQuery searchMods, global::peter_ficsit_api.GraphQL.IGetSMLVersionsQuery getSMLVersions, global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateQuery checkVersionUploadState, global::peter_ficsit_api.GraphQL.ICreateVersionMutation createVersion, global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionMutation finalizeCreateVersion, global::peter_ficsit_api.GraphQL.IGetModVersionQuery getModVersion, global::peter_ficsit_api.GraphQL.IUpdateVersionMutation updateVersion, global::peter_ficsit_api.GraphQL.IUploadVersionPartMutation uploadVersionPart)
        {
            _getMods = getMods ?? throw new global::System.ArgumentNullException(nameof(getMods));
            _getMod = getMod ?? throw new global::System.ArgumentNullException(nameof(getMod));
            _searchMods = searchMods ?? throw new global::System.ArgumentNullException(nameof(searchMods));
            _getSMLVersions = getSMLVersions ?? throw new global::System.ArgumentNullException(nameof(getSMLVersions));
            _checkVersionUploadState = checkVersionUploadState ?? throw new global::System.ArgumentNullException(nameof(checkVersionUploadState));
            _createVersion = createVersion ?? throw new global::System.ArgumentNullException(nameof(createVersion));
            _finalizeCreateVersion = finalizeCreateVersion ?? throw new global::System.ArgumentNullException(nameof(finalizeCreateVersion));
            _getModVersion = getModVersion ?? throw new global::System.ArgumentNullException(nameof(getModVersion));
            _updateVersion = updateVersion ?? throw new global::System.ArgumentNullException(nameof(updateVersion));
            _uploadVersionPart = uploadVersionPart ?? throw new global::System.ArgumentNullException(nameof(uploadVersionPart));
        }

        public static global::System.String ClientName => "ficsit_api";
        public global::peter_ficsit_api.GraphQL.IGetModsQuery GetMods => _getMods;
        public global::peter_ficsit_api.GraphQL.IGetModQuery GetMod => _getMod;
        public global::peter_ficsit_api.GraphQL.ISearchModsQuery SearchMods => _searchMods;
        public global::peter_ficsit_api.GraphQL.IGetSMLVersionsQuery GetSMLVersions => _getSMLVersions;
        public global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateQuery CheckVersionUploadState => _checkVersionUploadState;
        public global::peter_ficsit_api.GraphQL.ICreateVersionMutation CreateVersion => _createVersion;
        public global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionMutation FinalizeCreateVersion => _finalizeCreateVersion;
        public global::peter_ficsit_api.GraphQL.IGetModVersionQuery GetModVersion => _getModVersion;
        public global::peter_ficsit_api.GraphQL.IUpdateVersionMutation UpdateVersion => _updateVersion;
        public global::peter_ficsit_api.GraphQL.IUploadVersionPartMutation UploadVersionPart => _uploadVersionPart;
    }

    /// <summary>
    /// Represents the ficsit_api GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface Ificsit_api
    {
        global::peter_ficsit_api.GraphQL.IGetModsQuery GetMods { get; }

        global::peter_ficsit_api.GraphQL.IGetModQuery GetMod { get; }

        global::peter_ficsit_api.GraphQL.ISearchModsQuery SearchMods { get; }

        global::peter_ficsit_api.GraphQL.IGetSMLVersionsQuery GetSMLVersions { get; }

        global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateQuery CheckVersionUploadState { get; }

        global::peter_ficsit_api.GraphQL.ICreateVersionMutation CreateVersion { get; }

        global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionMutation FinalizeCreateVersion { get; }

        global::peter_ficsit_api.GraphQL.IGetModVersionQuery GetModVersion { get; }

        global::peter_ficsit_api.GraphQL.IUpdateVersionMutation UpdateVersion { get; }

        global::peter_ficsit_api.GraphQL.IUploadVersionPartMutation UploadVersionPart { get; }
    }
}

namespace peter_ficsit_api.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.GetModsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetModsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.IGetModsResult);
        public GetModsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetModsResultInfo info)
            {
                return new GetModsResult(MapNonNullableIGetMods_GetMods(info.GetMods, snapshot));
            }

            throw new global::System.ArgumentException("GetModsResultInfo expected.");
        }

        private global::peter_ficsit_api.GraphQL.IGetMods_GetMods MapNonNullableIGetMods_GetMods(global::peter_ficsit_api.GraphQL.State.GetModsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetMods_GetMods returnValue = default !;
            if (data.__typename.Equals("GetMods", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetMods_GetMods_GetMods(data.Count ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetMods_GetMods_ModsNonNullableArray(data.Mods ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods> MapNonNullableIGetMods_GetMods_ModsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.ModData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var mods = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods>();
            foreach (global::peter_ficsit_api.GraphQL.State.ModData child in list)
            {
                mods.Add(MapNonNullableIGetMods_GetMods_Mods(child, snapshot));
            }

            return mods;
        }

        private global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods MapNonNullableIGetMods_GetMods_Mods(global::peter_ficsit_api.GraphQL.State.ModData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetMods_GetMods_Mods returnValue = default !;
            if (data.__typename.Equals("Mod", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetMods_GetMods_Mods_Mod(data.Id ?? throw new global::System.ArgumentNullException(), data.Mod_reference ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Logo, data.Views ?? throw new global::System.ArgumentNullException(), data.Downloads ?? throw new global::System.ArgumentNullException(), data.Short_description ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetMods_GetMods_Mods_LatestVersions(data.LatestVersions ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions MapNonNullableIGetMods_GetMods_Mods_LatestVersions(global::peter_ficsit_api.GraphQL.State.LatestVersionsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetMods_GetMods_Mods_LatestVersions returnValue = default !;
            if (data.__typename.Equals("LatestVersions", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetMods_GetMods_Mods_LatestVersions_LatestVersions(MapIGetMods_GetMods_Mods_LatestVersions_Alpha(data.Alpha, snapshot), MapIGetMods_GetMods_Mods_LatestVersions_Beta(data.Beta, snapshot), MapIGetMods_GetMods_Mods_LatestVersions_Release(data.Release, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Alpha? MapIGetMods_GetMods_Mods_LatestVersions_Alpha(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMods_GetMods_Mods_LatestVersions_Alpha returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMods_GetMods_Mods_LatestVersions_Alpha_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Beta? MapIGetMods_GetMods_Mods_LatestVersions_Beta(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMods_GetMods_Mods_LatestVersions_Beta returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMods_GetMods_Mods_LatestVersions_Beta_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMods_GetMods_Mods_LatestVersions_Release? MapIGetMods_GetMods_Mods_LatestVersions_Release(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMods_GetMods_Mods_LatestVersions_Release returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMods_GetMods_Mods_LatestVersions_Release_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetModsResultInfo(global::peter_ficsit_api.GraphQL.State.GetModsData getMods, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GetMods = getMods;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::peter_ficsit_api.GraphQL.State.GetModsData GetMods { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetModsResultInfo(GetMods, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.GetModResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetModResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.IGetModResult);
        public GetModResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetModResultInfo info)
            {
                return new GetModResult(MapIGetMod_Mod(info.Mod, snapshot));
            }

            throw new global::System.ArgumentException("GetModResultInfo expected.");
        }

        private global::peter_ficsit_api.GraphQL.IGetMod_Mod? MapIGetMod_Mod(global::peter_ficsit_api.GraphQL.State.ModData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMod_Mod returnValue = default !;
            if (data?.__typename.Equals("Mod", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMod_Mod_Mod(data.Id ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Full_description, data.Short_description ?? throw new global::System.ArgumentNullException(), data.Logo, data.Mod_reference ?? throw new global::System.ArgumentNullException(), data.Source_url, data.Hidden ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetMod_Mod_LatestVersions(data.LatestVersions ?? throw new global::System.ArgumentNullException(), snapshot), data.Downloads ?? throw new global::System.ArgumentNullException(), data.Views ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetMod_Mod_AuthorsNonNullableArray(data.Authors ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions MapNonNullableIGetMod_Mod_LatestVersions(global::peter_ficsit_api.GraphQL.State.LatestVersionsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetMod_Mod_LatestVersions returnValue = default !;
            if (data.__typename.Equals("LatestVersions", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetMod_Mod_LatestVersions_LatestVersions(MapIGetMod_Mod_LatestVersions_Alpha(data.Alpha, snapshot), MapIGetMod_Mod_LatestVersions_Beta(data.Beta, snapshot), MapIGetMod_Mod_LatestVersions_Release(data.Release, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Alpha? MapIGetMod_Mod_LatestVersions_Alpha(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMod_Mod_LatestVersions_Alpha returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMod_Mod_LatestVersions_Alpha_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Link ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Beta? MapIGetMod_Mod_LatestVersions_Beta(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMod_Mod_LatestVersions_Beta returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMod_Mod_LatestVersions_Beta_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Link ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMod_Mod_LatestVersions_Release? MapIGetMod_Mod_LatestVersions_Release(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMod_Mod_LatestVersions_Release returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMod_Mod_LatestVersions_Release_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Link ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors> MapNonNullableIGetMod_Mod_AuthorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.UserModData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var userMods = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors>();
            foreach (global::peter_ficsit_api.GraphQL.State.UserModData child in list)
            {
                userMods.Add(MapNonNullableIGetMod_Mod_Authors(child, snapshot));
            }

            return userMods;
        }

        private global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors MapNonNullableIGetMod_Mod_Authors(global::peter_ficsit_api.GraphQL.State.UserModData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetMod_Mod_Authors returnValue = default !;
            if (data.__typename.Equals("UserMod", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetMod_Mod_Authors_UserMod(data.Role ?? throw new global::System.ArgumentNullException(), data.User_id ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetMod_Mod_Authors_User(data.User ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetMod_Mod_Authors_User MapNonNullableIGetMod_Mod_Authors_User(global::peter_ficsit_api.GraphQL.State.UserData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetMod_Mod_Authors_User returnValue = default !;
            if (data.__typename.Equals("User", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetMod_Mod_Authors_User_User(data.Id ?? throw new global::System.ArgumentNullException(), data.Username ?? throw new global::System.ArgumentNullException(), data.Avatar);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetModResultInfo(global::peter_ficsit_api.GraphQL.State.ModData? mod, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Mod = mod;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::peter_ficsit_api.GraphQL.State.ModData? Mod { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetModResultInfo(Mod, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchModsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.SearchModsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SearchModsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.ISearchModsResult);
        public SearchModsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SearchModsResultInfo info)
            {
                return new SearchModsResult(MapNonNullableISearchMods_GetMods(info.GetMods, snapshot));
            }

            throw new global::System.ArgumentException("SearchModsResultInfo expected.");
        }

        private global::peter_ficsit_api.GraphQL.ISearchMods_GetMods MapNonNullableISearchMods_GetMods(global::peter_ficsit_api.GraphQL.State.GetModsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISearchMods_GetMods returnValue = default !;
            if (data.__typename.Equals("GetMods", global::System.StringComparison.Ordinal))
            {
                returnValue = new SearchMods_GetMods_GetMods(MapNonNullableISearchMods_GetMods_ModsNonNullableArray(data.Mods ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods> MapNonNullableISearchMods_GetMods_ModsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.ModData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var mods = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods>();
            foreach (global::peter_ficsit_api.GraphQL.State.ModData child in list)
            {
                mods.Add(MapNonNullableISearchMods_GetMods_Mods(child, snapshot));
            }

            return mods;
        }

        private global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods MapNonNullableISearchMods_GetMods_Mods(global::peter_ficsit_api.GraphQL.State.ModData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISearchMods_GetMods_Mods returnValue = default !;
            if (data.__typename.Equals("Mod", global::System.StringComparison.Ordinal))
            {
                returnValue = new SearchMods_GetMods_Mods_Mod(data.Name ?? throw new global::System.ArgumentNullException(), data.Id ?? throw new global::System.ArgumentNullException(), data.Short_description ?? throw new global::System.ArgumentNullException(), MapNonNullableISearchMods_GetMods_Mods_LatestVersions(data.LatestVersions ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions MapNonNullableISearchMods_GetMods_Mods_LatestVersions(global::peter_ficsit_api.GraphQL.State.LatestVersionsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISearchMods_GetMods_Mods_LatestVersions returnValue = default !;
            if (data.__typename.Equals("LatestVersions", global::System.StringComparison.Ordinal))
            {
                returnValue = new SearchMods_GetMods_Mods_LatestVersions_LatestVersions(MapISearchMods_GetMods_Mods_LatestVersions_Alpha(data.Alpha, snapshot), MapISearchMods_GetMods_Mods_LatestVersions_Beta(data.Beta, snapshot), MapISearchMods_GetMods_Mods_LatestVersions_Release(data.Release, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Alpha? MapISearchMods_GetMods_Mods_LatestVersions_Alpha(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ISearchMods_GetMods_Mods_LatestVersions_Alpha returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new SearchMods_GetMods_Mods_LatestVersions_Alpha_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Link ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Beta? MapISearchMods_GetMods_Mods_LatestVersions_Beta(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ISearchMods_GetMods_Mods_LatestVersions_Beta returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new SearchMods_GetMods_Mods_LatestVersions_Beta_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Link ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.ISearchMods_GetMods_Mods_LatestVersions_Release? MapISearchMods_GetMods_Mods_LatestVersions_Release(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ISearchMods_GetMods_Mods_LatestVersions_Release returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new SearchMods_GetMods_Mods_LatestVersions_Release_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Link ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchModsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SearchModsResultInfo(global::peter_ficsit_api.GraphQL.State.GetModsData getMods, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GetMods = getMods;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::peter_ficsit_api.GraphQL.State.GetModsData GetMods { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SearchModsResultInfo(GetMods, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.GetSMLVersionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSMLVersionsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult);
        public GetSMLVersionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSMLVersionsResultInfo info)
            {
                return new GetSMLVersionsResult(MapNonNullableIGetSMLVersions_GetSMLVersions(info.GetSMLVersions, snapshot));
            }

            throw new global::System.ArgumentException("GetSMLVersionsResultInfo expected.");
        }

        private global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions MapNonNullableIGetSMLVersions_GetSMLVersions(global::peter_ficsit_api.GraphQL.State.GetSMLVersionsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetSMLVersions_GetSMLVersions returnValue = default !;
            if (data.__typename.Equals("GetSMLVersions", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetSMLVersions_GetSMLVersions_GetSMLVersions(data.Count ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetSMLVersions_GetSMLVersions_Sml_versionsNonNullableArray(data.Sml_versions ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions_Sml_versions> MapNonNullableIGetSMLVersions_GetSMLVersions_Sml_versionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.SMLVersionData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var sMLVersions = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions_Sml_versions>();
            foreach (global::peter_ficsit_api.GraphQL.State.SMLVersionData child in list)
            {
                sMLVersions.Add(MapNonNullableIGetSMLVersions_GetSMLVersions_Sml_versions(child, snapshot));
            }

            return sMLVersions;
        }

        private global::peter_ficsit_api.GraphQL.IGetSMLVersions_GetSMLVersions_Sml_versions MapNonNullableIGetSMLVersions_GetSMLVersions_Sml_versions(global::peter_ficsit_api.GraphQL.State.SMLVersionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetSMLVersions_GetSMLVersions_Sml_versions returnValue = default !;
            if (data.__typename.Equals("SMLVersion", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetSMLVersions_GetSMLVersions_Sml_versions_SMLVersion(data.Id ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Stability ?? throw new global::System.ArgumentNullException(), data.Changelog ?? throw new global::System.ArgumentNullException(), data.Link ?? throw new global::System.ArgumentNullException(), data.Date ?? throw new global::System.ArgumentNullException(), data.Satisfactory_version ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersionsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSMLVersionsResultInfo(global::peter_ficsit_api.GraphQL.State.GetSMLVersionsData getSMLVersions, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GetSMLVersions = getSMLVersions;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::peter_ficsit_api.GraphQL.State.GetSMLVersionsData GetSMLVersions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSMLVersionsResultInfo(GetSMLVersions, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CheckVersionUploadStateResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.CheckVersionUploadStateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CheckVersionUploadStateResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult);
        public CheckVersionUploadStateResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CheckVersionUploadStateResultInfo info)
            {
                return new CheckVersionUploadStateResult(MapICheckVersionUploadState_CheckVersionUploadState(info.CheckVersionUploadState, snapshot));
            }

            throw new global::System.ArgumentException("CheckVersionUploadStateResultInfo expected.");
        }

        private global::peter_ficsit_api.GraphQL.ICheckVersionUploadState_CheckVersionUploadState? MapICheckVersionUploadState_CheckVersionUploadState(global::peter_ficsit_api.GraphQL.State.CreateVersionResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICheckVersionUploadState_CheckVersionUploadState returnValue = default !;
            if (data?.__typename.Equals("CreateVersionResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CheckVersionUploadState_CheckVersionUploadState_CreateVersionResponse(data.Auto_approved ?? throw new global::System.ArgumentNullException(), MapICheckVersionUploadState_CheckVersionUploadState_Version(data.Version, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.ICheckVersionUploadState_CheckVersionUploadState_Version? MapICheckVersionUploadState_CheckVersionUploadState_Version(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICheckVersionUploadState_CheckVersionUploadState_Version returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CheckVersionUploadState_CheckVersionUploadState_Version_Version(data.Id ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CheckVersionUploadStateResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CheckVersionUploadStateResultInfo(global::peter_ficsit_api.GraphQL.State.CreateVersionResponseData? checkVersionUploadState, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CheckVersionUploadState = checkVersionUploadState;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::peter_ficsit_api.GraphQL.State.CreateVersionResponseData? CheckVersionUploadState { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CheckVersionUploadStateResultInfo(CheckVersionUploadState, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CreateVersionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.CreateVersionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateVersionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.ICreateVersionResult);
        public CreateVersionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateVersionResultInfo info)
            {
                return new CreateVersionResult(info.CreateVersion);
            }

            throw new global::System.ArgumentException("CreateVersionResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CreateVersionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateVersionResultInfo(global::System.String createVersion, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateVersion = createVersion;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String CreateVersion { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateVersionResultInfo(CreateVersion, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class FinalizeCreateVersionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.FinalizeCreateVersionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FinalizeCreateVersionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult);
        public FinalizeCreateVersionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FinalizeCreateVersionResultInfo info)
            {
                return new FinalizeCreateVersionResult(info.FinalizeCreateVersion);
            }

            throw new global::System.ArgumentException("FinalizeCreateVersionResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class FinalizeCreateVersionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FinalizeCreateVersionResultInfo(global::System.Boolean finalizeCreateVersion, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            FinalizeCreateVersion = finalizeCreateVersion;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean FinalizeCreateVersion { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FinalizeCreateVersionResultInfo(FinalizeCreateVersion, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.GetModVersionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetModVersionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.IGetModVersionResult);
        public GetModVersionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetModVersionResultInfo info)
            {
                return new GetModVersionResult(MapIGetModVersion_GetVersion(info.GetVersion, snapshot));
            }

            throw new global::System.ArgumentException("GetModVersionResultInfo expected.");
        }

        private global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion? MapIGetModVersion_GetVersion(global::peter_ficsit_api.GraphQL.State.VersionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetModVersion_GetVersion returnValue = default !;
            if (data?.__typename.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetModVersion_GetVersion_Version(data.Id ?? throw new global::System.ArgumentNullException(), data.Version ?? throw new global::System.ArgumentNullException(), data.Stability ?? throw new global::System.ArgumentNullException(), data.Sml_version ?? throw new global::System.ArgumentNullException(), data.Downloads ?? throw new global::System.ArgumentNullException(), data.Created_at ?? throw new global::System.ArgumentNullException(), data.Changelog ?? throw new global::System.ArgumentNullException(), data.Link ?? throw new global::System.ArgumentNullException(), data.Hash, data.Size, MapNonNullableIGetModVersion_GetVersion_Mod(data.Mod ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod MapNonNullableIGetModVersion_GetVersion_Mod(global::peter_ficsit_api.GraphQL.State.ModData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetModVersion_GetVersion_Mod returnValue = default !;
            if (data.__typename.Equals("Mod", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetModVersion_GetVersion_Mod_Mod(data.Id ?? throw new global::System.ArgumentNullException(), data.Mod_reference ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetModVersion_GetVersion_Mod_AuthorsNonNullableArray(data.Authors ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod_Authors> MapNonNullableIGetModVersion_GetVersion_Mod_AuthorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.UserModData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var userMods = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod_Authors>();
            foreach (global::peter_ficsit_api.GraphQL.State.UserModData child in list)
            {
                userMods.Add(MapNonNullableIGetModVersion_GetVersion_Mod_Authors(child, snapshot));
            }

            return userMods;
        }

        private global::peter_ficsit_api.GraphQL.IGetModVersion_GetVersion_Mod_Authors MapNonNullableIGetModVersion_GetVersion_Mod_Authors(global::peter_ficsit_api.GraphQL.State.UserModData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetModVersion_GetVersion_Mod_Authors returnValue = default !;
            if (data.__typename.Equals("UserMod", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetModVersion_GetVersion_Mod_Authors_UserMod(data.Role ?? throw new global::System.ArgumentNullException(), data.User_id ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetModVersionResultInfo(global::peter_ficsit_api.GraphQL.State.VersionData? getVersion, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GetVersion = getVersion;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::peter_ficsit_api.GraphQL.State.VersionData? GetVersion { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetModVersionResultInfo(GetVersion, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersion_1ResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.UpdateVersion_1Result>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateVersion_1ResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.IUpdateVersionResult);
        public UpdateVersion_1Result Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateVersion_1ResultInfo info)
            {
                return new UpdateVersion_1Result(MapNonNullableIUpdateVersion_UpdateVersion(info.UpdateVersion, snapshot));
            }

            throw new global::System.ArgumentException("UpdateVersion_1ResultInfo expected.");
        }

        private global::peter_ficsit_api.GraphQL.IUpdateVersion_UpdateVersion MapNonNullableIUpdateVersion_UpdateVersion(global::peter_ficsit_api.GraphQL.State.VersionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateVersion_UpdateVersion returnValue = default !;
            if (data.__typename.Equals("Version", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateVersion_UpdateVersion_Version(data.Id ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersion_1ResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateVersion_1ResultInfo(global::peter_ficsit_api.GraphQL.State.VersionData updateVersion, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateVersion = updateVersion;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::peter_ficsit_api.GraphQL.State.VersionData UpdateVersion { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateVersion_1ResultInfo(UpdateVersion, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UploadVersionPartResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.UploadVersionPartResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UploadVersionPartResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::peter_ficsit_api.GraphQL.IUploadVersionPartResult);
        public UploadVersionPartResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UploadVersionPartResultInfo info)
            {
                return new UploadVersionPartResult(info.UploadVersionPart);
            }

            throw new global::System.ArgumentException("UploadVersionPartResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UploadVersionPartResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UploadVersionPartResultInfo(global::System.Boolean uploadVersionPart, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UploadVersionPart = uploadVersionPart;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean UploadVersionPart { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UploadVersionPartResultInfo(UploadVersionPart, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    internal interface INewVersionInfo
    {
        global::System.Boolean IsChangelogSet { get; }

        global::System.Boolean IsStabilitySet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    internal interface IUpdateVersionInfo
    {
        global::System.Boolean IsChangelogSet { get; }

        global::System.Boolean IsStabilitySet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.Order> _orderParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.ModFields> _modFieldsParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modReferenceParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        public GetModsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _orderParser = serializerResolver.GetLeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.Order>("Order") ?? throw new global::System.ArgumentException("No serializer for type `Order` found.");
            _modFieldsParser = serializerResolver.GetLeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.ModFields>("ModFields") ?? throw new global::System.ArgumentException("No serializer for type `ModFields` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _modIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModID") ?? throw new global::System.ArgumentException("No serializer for type `ModID` found.");
            _modReferenceParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModReference") ?? throw new global::System.ArgumentException("No serializer for type `ModReference` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetModsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetModsResult Result, GetModsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetModsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetModsResult, GetModsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetModsResultInfo(DeserializeNonNullableIGetMods_GetMods(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getMods")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::peter_ficsit_api.GraphQL.State.GetModsData DeserializeNonNullableIGetMods_GetMods(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GetMods", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.GetModsData(typename, count: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "count")), mods: DeserializeNonNullableIGetMods_GetMods_ModsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mods")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.ModData> DeserializeNonNullableIGetMods_GetMods_ModsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var mods = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.State.ModData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                mods.Add(DeserializeNonNullableIGetMods_GetMods_Mods(child));
            }

            return mods;
        }

        private global::peter_ficsit_api.GraphQL.State.ModData DeserializeNonNullableIGetMods_GetMods_Mods(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Mod", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.ModData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), mod_Reference: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mod_reference")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), logo: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "logo")), views: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "views")), downloads: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "downloads")), short_Description: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "short_description")), latestVersions: DeserializeNonNullableIGetMods_GetMods_Mods_LatestVersions(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "latestVersions")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _modIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::peter_ficsit_api.GraphQL.State.LatestVersionsData DeserializeNonNullableIGetMods_GetMods_Mods_LatestVersions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LatestVersions", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.LatestVersionsData(typename, alpha: DeserializeIGetMods_GetMods_Mods_LatestVersions_Alpha(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "alpha")), beta: DeserializeIGetMods_GetMods_Mods_LatestVersions_Beta(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "beta")), release: DeserializeIGetMods_GetMods_Mods_LatestVersions_Release(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "release")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeIGetMods_GetMods_Mods_LatestVersions_Alpha(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeIGetMods_GetMods_Mods_LatestVersions_Beta(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeIGetMods_GetMods_Mods_LatestVersions_Release(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modReferenceParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _userIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        public GetModBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _modIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModID") ?? throw new global::System.ArgumentException("No serializer for type `ModID` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _modReferenceParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModReference") ?? throw new global::System.ArgumentException("No serializer for type `ModReference` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _userIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("UserID") ?? throw new global::System.ArgumentException("No serializer for type `UserID` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetModResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetModResult Result, GetModResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetModResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetModResult, GetModResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetModResultInfo(DeserializeIGetMod_Mod(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mod")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::peter_ficsit_api.GraphQL.State.ModData? DeserializeIGetMod_Mod(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Mod", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.ModData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), created_At: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), full_Description: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "full_description")), short_Description: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "short_description")), logo: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "logo")), mod_Reference: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mod_reference")), source_Url: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "source_url")), hidden: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hidden")), latestVersions: DeserializeNonNullableIGetMod_Mod_LatestVersions(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "latestVersions")), downloads: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "downloads")), views: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "views")), authors: DeserializeNonNullableIGetMod_Mod_AuthorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _modIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTime DeserializeNonNullableDateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::peter_ficsit_api.GraphQL.State.LatestVersionsData DeserializeNonNullableIGetMod_Mod_LatestVersions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LatestVersions", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.LatestVersionsData(typename, alpha: DeserializeIGetMod_Mod_LatestVersions_Alpha(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "alpha")), beta: DeserializeIGetMod_Mod_LatestVersions_Beta(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "beta")), release: DeserializeIGetMod_Mod_LatestVersions_Release(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "release")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeIGetMod_Mod_LatestVersions_Alpha(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), link: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "link")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), created_At: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeIGetMod_Mod_LatestVersions_Beta(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), link: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "link")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), created_At: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeIGetMod_Mod_LatestVersions_Release(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), link: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "link")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), created_At: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.UserModData> DeserializeNonNullableIGetMod_Mod_AuthorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var userMods = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.State.UserModData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                userMods.Add(DeserializeNonNullableIGetMod_Mod_Authors(child));
            }

            return userMods;
        }

        private global::peter_ficsit_api.GraphQL.State.UserModData DeserializeNonNullableIGetMod_Mod_Authors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserMod", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.UserModData(typename, role: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role")), user_Id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user_id")), user: DeserializeNonNullableIGetMod_Mod_Authors_User(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.UserData DeserializeNonNullableIGetMod_Mod_Authors_User(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("User", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.UserData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), username: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")), avatar: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "avatar")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SearchModsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ISearchModsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ISearchModsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        public SearchModsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ISearchModsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _modIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModID") ?? throw new global::System.ArgumentException("No serializer for type `ModID` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
        }

        public global::StrawberryShake.IOperationResult<ISearchModsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISearchModsResult Result, SearchModsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ISearchModsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISearchModsResult, SearchModsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SearchModsResultInfo(DeserializeNonNullableISearchMods_GetMods(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getMods")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::peter_ficsit_api.GraphQL.State.GetModsData DeserializeNonNullableISearchMods_GetMods(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GetMods", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.GetModsData(typename, mods: DeserializeNonNullableISearchMods_GetMods_ModsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mods")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.ModData> DeserializeNonNullableISearchMods_GetMods_ModsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var mods = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.State.ModData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                mods.Add(DeserializeNonNullableISearchMods_GetMods_Mods(child));
            }

            return mods;
        }

        private global::peter_ficsit_api.GraphQL.State.ModData DeserializeNonNullableISearchMods_GetMods_Mods(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Mod", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.ModData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), short_Description: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "short_description")), latestVersions: DeserializeNonNullableISearchMods_GetMods_Mods_LatestVersions(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "latestVersions")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::peter_ficsit_api.GraphQL.State.LatestVersionsData DeserializeNonNullableISearchMods_GetMods_Mods_LatestVersions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LatestVersions", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.LatestVersionsData(typename, alpha: DeserializeISearchMods_GetMods_Mods_LatestVersions_Alpha(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "alpha")), beta: DeserializeISearchMods_GetMods_Mods_LatestVersions_Beta(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "beta")), release: DeserializeISearchMods_GetMods_Mods_LatestVersions_Release(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "release")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeISearchMods_GetMods_Mods_LatestVersions_Alpha(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), link: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "link")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), created_At: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTime DeserializeNonNullableDateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeISearchMods_GetMods_Mods_LatestVersions_Beta(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), link: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "link")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), created_At: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeISearchMods_GetMods_Mods_LatestVersions_Release(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), link: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "link")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), created_At: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersionsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.VersionStabilities> _versionStabilitiesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _sMLVersionIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        public GetSMLVersionsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetSMLVersionsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _versionStabilitiesParser = serializerResolver.GetLeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.VersionStabilities>("VersionStabilities") ?? throw new global::System.ArgumentException("No serializer for type `VersionStabilities` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _sMLVersionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("SMLVersionID") ?? throw new global::System.ArgumentException("No serializer for type `SMLVersionID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetSMLVersionsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetSMLVersionsResult Result, GetSMLVersionsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetSMLVersionsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetSMLVersionsResult, GetSMLVersionsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetSMLVersionsResultInfo(DeserializeNonNullableIGetSMLVersions_GetSMLVersions(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getSMLVersions")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::peter_ficsit_api.GraphQL.State.GetSMLVersionsData DeserializeNonNullableIGetSMLVersions_GetSMLVersions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GetSMLVersions", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.GetSMLVersionsData(typename, count: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "count")), sml_Versions: DeserializeNonNullableIGetSMLVersions_GetSMLVersions_Sml_versionsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_versions")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.SMLVersionData> DeserializeNonNullableIGetSMLVersions_GetSMLVersions_Sml_versionsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var sMLVersions = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.State.SMLVersionData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                sMLVersions.Add(DeserializeNonNullableIGetSMLVersions_GetSMLVersions_Sml_versions(child));
            }

            return sMLVersions;
        }

        private global::peter_ficsit_api.GraphQL.State.SMLVersionData DeserializeNonNullableIGetSMLVersions_GetSMLVersions_Sml_versions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SMLVersion", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.SMLVersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), stability: DeserializeNonNullableVersionStabilities(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stability")), changelog: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changelog")), link: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "link")), date: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "date")), satisfactory_Version: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "satisfactory_version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _sMLVersionIDParser.Parse(obj.Value.GetString()!);
        }

        private global::peter_ficsit_api.GraphQL.VersionStabilities DeserializeNonNullableVersionStabilities(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _versionStabilitiesParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTime DeserializeNonNullableDateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CheckVersionUploadStateBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public CheckVersionUploadStateBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ICheckVersionUploadStateResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _modIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModID") ?? throw new global::System.ArgumentException("No serializer for type `ModID` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<ICheckVersionUploadStateResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICheckVersionUploadStateResult Result, CheckVersionUploadStateResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICheckVersionUploadStateResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICheckVersionUploadStateResult, CheckVersionUploadStateResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CheckVersionUploadStateResultInfo(DeserializeICheckVersionUploadState_CheckVersionUploadState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "checkVersionUploadState")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::peter_ficsit_api.GraphQL.State.CreateVersionResponseData? DeserializeICheckVersionUploadState_CheckVersionUploadState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CreateVersionResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.CreateVersionResponseData(typename, auto_Approved: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "auto_approved")), version: DeserializeICheckVersionUploadState_CheckVersionUploadState_Version(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeICheckVersionUploadState_CheckVersionUploadState_Version(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _versionIDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CreateVersionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.ICreateVersionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ICreateVersionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        public CreateVersionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.ICreateVersionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _modIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModID") ?? throw new global::System.ArgumentException("No serializer for type `ModID` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateVersionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateVersionResult Result, CreateVersionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateVersionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateVersionResult, CreateVersionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateVersionResultInfo(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createVersion")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _versionIDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class FinalizeCreateVersionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.VersionStabilities> _versionStabilitiesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public FinalizeCreateVersionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IFinalizeCreateVersionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _versionStabilitiesParser = serializerResolver.GetLeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.VersionStabilities>("VersionStabilities") ?? throw new global::System.ArgumentException("No serializer for type `VersionStabilities` found.");
            _modIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModID") ?? throw new global::System.ArgumentException("No serializer for type `ModID` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IFinalizeCreateVersionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFinalizeCreateVersionResult Result, FinalizeCreateVersionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IFinalizeCreateVersionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFinalizeCreateVersionResult, FinalizeCreateVersionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FinalizeCreateVersionResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "finalizeCreateVersion")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModVersionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IGetModVersionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModVersionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.VersionStabilities> _versionStabilitiesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modReferenceParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _userIDParser;
        public GetModVersionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IGetModVersionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _versionStabilitiesParser = serializerResolver.GetLeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.VersionStabilities>("VersionStabilities") ?? throw new global::System.ArgumentException("No serializer for type `VersionStabilities` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _modIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModID") ?? throw new global::System.ArgumentException("No serializer for type `ModID` found.");
            _modReferenceParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModReference") ?? throw new global::System.ArgumentException("No serializer for type `ModReference` found.");
            _userIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("UserID") ?? throw new global::System.ArgumentException("No serializer for type `UserID` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetModVersionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetModVersionResult Result, GetModVersionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetModVersionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetModVersionResult, GetModVersionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetModVersionResultInfo(DeserializeIGetModVersion_GetVersion(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getVersion")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData? DeserializeIGetModVersion_GetVersion(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "version")), stability: DeserializeNonNullableVersionStabilities(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stability")), sml_Version: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sml_version")), downloads: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "downloads")), created_At: DeserializeNonNullableDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_at")), changelog: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changelog")), link: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "link")), hash: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hash")), size: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "size")), mod: DeserializeNonNullableIGetModVersion_GetVersion_Mod(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mod")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _versionIDParser.Parse(obj.Value.GetString()!);
        }

        private global::peter_ficsit_api.GraphQL.VersionStabilities DeserializeNonNullableVersionStabilities(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _versionStabilitiesParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTime DeserializeNonNullableDateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::peter_ficsit_api.GraphQL.State.ModData DeserializeNonNullableIGetModVersion_GetVersion_Mod(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Mod", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.ModData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), mod_Reference: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mod_reference")), name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), authors: DeserializeNonNullableIGetModVersion_GetVersion_Mod_AuthorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.UserModData> DeserializeNonNullableIGetModVersion_GetVersion_Mod_AuthorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var userMods = new global::System.Collections.Generic.List<global::peter_ficsit_api.GraphQL.State.UserModData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                userMods.Add(DeserializeNonNullableIGetModVersion_GetVersion_Mod_Authors(child));
            }

            return userMods;
        }

        private global::peter_ficsit_api.GraphQL.State.UserModData DeserializeNonNullableIGetModVersion_GetVersion_Mod_Authors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserMod", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.UserModData(typename, role: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role")), user_Id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user_id")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UpdateVersionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IUpdateVersionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IUpdateVersionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.VersionStabilities> _versionStabilitiesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpdateVersionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IUpdateVersionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _versionStabilitiesParser = serializerResolver.GetLeafValueParser<global::System.String, global::peter_ficsit_api.GraphQL.VersionStabilities>("VersionStabilities") ?? throw new global::System.ArgumentException("No serializer for type `VersionStabilities` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateVersionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateVersionResult Result, UpdateVersion_1ResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUpdateVersionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateVersionResult, UpdateVersion_1ResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateVersion_1ResultInfo(DeserializeNonNullableIUpdateVersion_UpdateVersion(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateVersion")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::peter_ficsit_api.GraphQL.State.VersionData DeserializeNonNullableIUpdateVersion_UpdateVersion(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Version", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::peter_ficsit_api.GraphQL.State.VersionData(typename, id: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _versionIDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UploadVersionPartBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::peter_ficsit_api.GraphQL.IUploadVersionPartResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IUploadVersionPartResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _modIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _versionIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::peter_ficsit_api.UploadData, global::peter_ficsit_api.UploadData> _uploadParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public UploadVersionPartBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::peter_ficsit_api.GraphQL.IUploadVersionPartResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _modIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ModID") ?? throw new global::System.ArgumentException("No serializer for type `ModID` found.");
            _versionIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("VersionID") ?? throw new global::System.ArgumentException("No serializer for type `VersionID` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _uploadParser = serializerResolver.GetLeafValueParser<global::peter_ficsit_api.UploadData, global::peter_ficsit_api.UploadData>("Upload") ?? throw new global::System.ArgumentException("No serializer for type `Upload` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IUploadVersionPartResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUploadVersionPartResult Result, UploadVersionPartResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUploadVersionPartResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUploadVersionPartResult, UploadVersionPartResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UploadVersionPartResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "uploadVersionPart")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetModsData
    {
        public GetModsData(global::System.String __typename, global::System.Int32? count = default !, global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.ModData>? mods = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Count = count;
            Mods = mods;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Count { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.ModData>? Mods { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ModData
    {
        public ModData(global::System.String __typename, global::System.String? id = default !, global::System.String? mod_Reference = default !, global::System.String? name = default !, global::System.String? logo = default !, global::System.Int32? views = default !, global::System.Int32? downloads = default !, global::System.String? short_Description = default !, global::peter_ficsit_api.GraphQL.State.LatestVersionsData? latestVersions = default !, global::System.DateTime? created_At = default !, global::System.String? full_Description = default !, global::System.String? source_Url = default !, global::System.Boolean? hidden = default !, global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.UserModData>? authors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Mod_reference = mod_Reference;
            Name = name;
            Logo = logo;
            Views = views;
            Downloads = downloads;
            Short_description = short_Description;
            LatestVersions = latestVersions;
            Created_at = created_At;
            Full_description = full_Description;
            Source_url = source_Url;
            Hidden = hidden;
            Authors = authors;
        }

        public global::System.String __typename { get; }

        public global::System.String? Id { get; }

        public global::System.String? Mod_reference { get; }

        public global::System.String? Name { get; }

        public global::System.String? Logo { get; }

        public global::System.Int32? Views { get; }

        public global::System.Int32? Downloads { get; }

        public global::System.String? Short_description { get; }

        public global::peter_ficsit_api.GraphQL.State.LatestVersionsData? LatestVersions { get; }

        public global::System.DateTime? Created_at { get; }

        public global::System.String? Full_description { get; }

        public global::System.String? Source_url { get; }

        public global::System.Boolean? Hidden { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.UserModData>? Authors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class LatestVersionsData
    {
        public LatestVersionsData(global::System.String __typename, global::peter_ficsit_api.GraphQL.State.VersionData? alpha = default !, global::peter_ficsit_api.GraphQL.State.VersionData? beta = default !, global::peter_ficsit_api.GraphQL.State.VersionData? release = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Alpha = alpha;
            Beta = beta;
            Release = release;
        }

        public global::System.String __typename { get; }

        public global::peter_ficsit_api.GraphQL.State.VersionData? Alpha { get; }

        public global::peter_ficsit_api.GraphQL.State.VersionData? Beta { get; }

        public global::peter_ficsit_api.GraphQL.State.VersionData? Release { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class VersionData
    {
        public VersionData(global::System.String __typename, global::System.String? id = default !, global::System.String? version = default !, global::System.String? sml_Version = default !, global::System.String? link = default !, global::System.DateTime? created_At = default !, global::peter_ficsit_api.GraphQL.VersionStabilities? stability = default !, global::System.Int32? downloads = default !, global::System.String? changelog = default !, global::System.String? hash = default !, global::System.Int32? size = default !, global::peter_ficsit_api.GraphQL.State.ModData? mod = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Version = version;
            Sml_version = sml_Version;
            Link = link;
            Created_at = created_At;
            Stability = stability;
            Downloads = downloads;
            Changelog = changelog;
            Hash = hash;
            Size = size;
            Mod = mod;
        }

        public global::System.String __typename { get; }

        public global::System.String? Id { get; }

        public global::System.String? Version { get; }

        public global::System.String? Sml_version { get; }

        public global::System.String? Link { get; }

        public global::System.DateTime? Created_at { get; }

        public global::peter_ficsit_api.GraphQL.VersionStabilities? Stability { get; }

        public global::System.Int32? Downloads { get; }

        public global::System.String? Changelog { get; }

        public global::System.String? Hash { get; }

        public global::System.Int32? Size { get; }

        public global::peter_ficsit_api.GraphQL.State.ModData? Mod { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UserModData
    {
        public UserModData(global::System.String __typename, global::System.String? role = default !, global::System.String? user_Id = default !, global::peter_ficsit_api.GraphQL.State.UserData? user = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Role = role;
            User_id = user_Id;
            User = user;
        }

        public global::System.String __typename { get; }

        public global::System.String? Role { get; }

        public global::System.String? User_id { get; }

        public global::peter_ficsit_api.GraphQL.State.UserData? User { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UserData
    {
        public UserData(global::System.String __typename, global::System.String? id = default !, global::System.String? username = default !, global::System.String? avatar = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Username = username;
            Avatar = avatar;
        }

        public global::System.String __typename { get; }

        public global::System.String? Id { get; }

        public global::System.String? Username { get; }

        public global::System.String? Avatar { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetSMLVersionsData
    {
        public GetSMLVersionsData(global::System.String __typename, global::System.Int32? count = default !, global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.SMLVersionData>? sml_Versions = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Count = count;
            Sml_versions = sml_Versions;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Count { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::peter_ficsit_api.GraphQL.State.SMLVersionData>? Sml_versions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SMLVersionData
    {
        public SMLVersionData(global::System.String __typename, global::System.String? id = default !, global::System.String? version = default !, global::peter_ficsit_api.GraphQL.VersionStabilities? stability = default !, global::System.String? changelog = default !, global::System.String? link = default !, global::System.DateTime? date = default !, global::System.Int32? satisfactory_Version = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            Version = version;
            Stability = stability;
            Changelog = changelog;
            Link = link;
            Date = date;
            Satisfactory_version = satisfactory_Version;
        }

        public global::System.String __typename { get; }

        public global::System.String? Id { get; }

        public global::System.String? Version { get; }

        public global::peter_ficsit_api.GraphQL.VersionStabilities? Stability { get; }

        public global::System.String? Changelog { get; }

        public global::System.String? Link { get; }

        public global::System.DateTime? Date { get; }

        public global::System.Int32? Satisfactory_version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CreateVersionResponseData
    {
        public CreateVersionResponseData(global::System.String __typename, global::System.Boolean? auto_Approved = default !, global::peter_ficsit_api.GraphQL.State.VersionData? version = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Auto_approved = auto_Approved;
            Version = version;
        }

        public global::System.String __typename { get; }

        public global::System.Boolean? Auto_approved { get; }

        public global::peter_ficsit_api.GraphQL.State.VersionData? Version { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ficsit_apiEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ficsit_apiStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ficsit_apiStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
